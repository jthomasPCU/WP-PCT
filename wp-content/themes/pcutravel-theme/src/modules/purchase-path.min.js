var purchasePathApp, purchasePath, onSpinnerClose = null, onModalClose = null;

jQuery(document).ready(function(e) {
function BenefitSelectedTravelerModel(e) {
    return {
        travelerID: e,
        selected: !0
    }
}
});

jQuery(document).ready(function(e) {
    if (e("#purchase-path-spinner").on("hidden.bs.modal", function() {
        isFunction(onSpinnerClose) && onSpinnerClose()
    }),
    e("#purchase-path-message").on("hidden.bs.modal", function() {
        isFunction(onModalClose) && onModalClose()
    }),
    (purchasePath = new PurchasePath).data.companyID = e("#CompanyID").val(),
    purchasePath.data.myPointComfort.user.id = e("#UserID").val(),
    e("#SelectProduct").val() && (purchasePath.data.product = e("#SelectProduct").val() + "-" + e("#SelectTravelOption").val()),
    e("#ProductID").val() && (purchasePath.data.productId = e("#ProductID").val()),
    purchasePath.data.settings.successfulPurchaseRedirectUrl = e("#SuccessfulPurchaseRedirectUrl").val(),
    "IND84001804801" == e("#CompanyID").val()) {
        var t = window.invite_referrals || {};
        !function() {
            t.auth = {
                bid_e: "C9E7120C2DA0A29968007F1D315900CA",
                bid: "29170",
                t: "420",
                email: "",
                mobile: "",
                userParams: {
                    fname: "",
                    lname: "",
                    birthday: "",
                    gender: ""
                },
                referrerCode: "",
                orderID: "",
                purchaseValue: "",
                userCustomParams: {
                    customValue: "",
                    shareLink: "",
                    shareTitle: "",
                    shareDesc: "",
                    shareImg: ""
                },
                showWidget: ""
            };
            var e = document.createElement("script");
            e.async = !0,
            e.src = ("https:" == document.location.protocol ? "//d11yp7khhhspcr.cloudfront.net" : "//cdn.invitereferrals.com") + "/js/invite-referrals-1.0.js";
            var a = document.getElementsByTagName("script")[0];
            a.parentNode.insertBefore(e, a)
        }()
    }
    purchasePath.data.trip.travelerGroups.push(new TravelerGroup),
    purchasePath.data.trip.travelerGroups[0].travelers.push(new Traveler(purchasePath.defaultTravelerType,1)),
    (purchasePathApp = new Vue({
        el: "#purchase-path",
        data: purchasePath.data,
        components: {
            vuejsDatepicker: vuejsDatepicker
        },
        methods: {
            init: function(t) {
                var a = {
                    companyID: purchasePath.data.companyID,
                    productID: purchasePath.data.productId,
                    userID: purchasePath.data.myPointComfort.user.id
                };

                // Joseph
                // let search_text = JSON.stringify(a);

                e.ajax({
                    url: PointComfort.API + "/api/purchase-path/",
                    method: "POST",
                    success: function(result) {console.log(a);},
                    error: function(result) {alert('/api/purchase-path/ error');},
                    contentType: "application/json",
                    data: JSON.stringify(a)
                            // Joseph
                            // {
                            // action: 'query_xml_api',
                            // search_text: search_text 
                            // } 
                }).done(function(e) {
                    e.success ? (purchasePath.data.company = e.data.company,
                    purchasePath.data.options.products = e.data.productOptions,
                    purchasePath.data.regions = e.data.regions,
                    purchasePath.data.countries = e.data.countries,
                    purchasePath.data.settings.sections = e.data.sections,
                    purchasePath.data.options.previousTravelers = e.data.previousTravelers,
                    e.data.user && (purchasePath.data.myPointComfort.isNewUser = !1,
                    purchasePath.data.myPointComfort.user.id = e.data.user.id,
                    purchasePath.data.myPointComfort.user.email = e.data.user.email,
                    purchasePath.data.myPointComfort.user.firstName = e.data.user.firstName,
                    purchasePath.data.myPointComfort.user.lastName = e.data.user.lastName,
                    purchasePath.data.myPointComfort.user.fullName = e.data.user.firstName + " " + e.data.user.lastName),
                    purchasePathApp.setCountries(),
                    purchasePathApp.setCompanyInfo(),
                    purchasePath.resetDepartureDateSettingsForTraveler(0, 0),
                    purchasePath.resetReturnDateSettingsForTraveler(0, 0),
                    1 === purchasePath.data.options.products.length && (purchasePath.data.product = purchasePath.data.options.products[0].id,
                    purchasePath.data.selectedProductOption = purchasePath.data.options.products[0],
                    purchasePathApp.setup()),
                    isFunction(t) && t(1)) : purchasePathApp.showModalError("Purchase path init failure.")
                }).fail(function() {
                    purchasePathApp.showModalError("Purchase path init call failed.")
                })
            },
            initWithSelectedPlan: function(t) {
                purchasePathApp.setup(function() {
                    var a = e("#SelectedPlan").val();
                    e.each(purchasePath.data.plans, function(e, t) {
                        t.selected = t.id == a
                    }),
                    isFunction(t) && t(1)
                })
            },
            initWithProductId: function(e) {
                purchasePathApp.setup(function() {
                    purchasePath.data.options.products.length > 1 && (purchasePath.data.product = ""),
                    isFunction(e) && e(1)
                })
            },
            initWithPayload: function(t) {
                var a = null;
                try {
                    a = JSON.parse(decodeURIComponent(e("#Payload").val()))
                } catch (e) {
                    return void this.showModalError("An error occurred. Please contact Point Comfort support.")
                }
                purchasePath.data.companyID = a.companyID,
                purchasePath.data.options.products = a.productOptions,
                purchasePath.data.product = a.selectedProductId,
                this.setup(function() {
                    purchasePath.data.trip = a.trip,
                    purchasePath.data.plans = a.plans;
                    for (var r = 0; r < purchasePath.data.plans.length; r++)
                        a.plans[r].selected && (purchasePath.data.selectedPlan = purchasePath.data.plans[r]);
                    e.each(purchasePath.data.trip.travelerGroups, function(t, a) {
                        purchasePath.resetAvailableTravelerTypesRemainingForGroup(t),
                        e.each(a.travelers, function(e, a) {
                            purchasePath.resetDepartureDateSettingsForTraveler(t, e),
                            purchasePath.resetReturnDateSettingsForTraveler(t, e),
                            a.pricings = []
                        })
                    }),
                    purchasePathApp.setCountries(),
                    purchasePath.recalculatePricings(),
                    purchasePathApp.updatePlanPriceIndicator(),
                    isFunction(t) && t(3)
                })
            },
            initWithApplication: async function(t) {
                var a = e("#SavedApplicationID").val()
                  , r = await purchasePath.getSavedApplication(a)
                  , i = null;
                try {
                    if (!r.state)
                        throw new Error;
                    i = JSON.parse(r.state)
                } catch (e) {
                    return this.showModalError("We're sorry. We were unable to load your saved application."),
                    void this.init(t(1))
                }
                var s = e("#purchase-path-save-application");
                e(s.find("input[name=email]")[0]).val(r.emailAddress),
                purchasePath.data.companyID = i.companyID,
                purchasePath.data.myPointComfort = i.myPointComfort,
                this.init(function() {
                    purchasePath.data.product = i.selectedProductOptionID,
                    purchasePathApp.setup(function() {
                        purchasePath.data.trip = i.trip,
                        purchasePath.data.primaryAddress = i.primaryAddress,
                        purchasePath.data.myPointComfort = i.myPointComfort,
                        e.each(purchasePath.data.plans, function(t, a) {
                            a.selected = !1,
                            i.selectedPlan.id == a.id && (a.selected = !0,
                            a.maximum.selected = i.selectedPlan.maximum,
                            a.deductible.selected = i.selectedPlan.deductible,
                            e.each(i.selectedPlan.selectedBenefitIDs, function(t, r) {
                                var i = e.findFirst(a.benefits, function(e) {
                                    return r === e.id
                                });
                                i && (i.selected = !0)
                            }),
                            purchasePath.data.selectedPlan = a)
                        }),
                        e.each(purchasePath.data.trip.travelerGroups, function(t, a) {
                            purchasePath.resetAvailableTravelerTypesRemainingForGroup(t),
                            e.each(a.travelers, function(e, a) {
                                purchasePath.resetDepartureDateSettingsForTraveler(t, e),
                                purchasePath.resetReturnDateSettingsForTraveler(t, e),
                                a.pricings = []
                            })
                        }),
                        purchasePathApp.setCountries(),
                        purchasePath.recalculatePricings(),
                        purchasePathApp.updatePlanPriceIndicator(),
                        console.log(i),
                        isFunction(t) && t(i.step)
                    })
                })
            },
            setup: function(t) {
                var a, r;
                if (purchasePath.data.options.products.length) {
                    var i = e.findFirst(purchasePath.data.options.products, function(e) {
                        return e.id == purchasePath.data.product
                    });
                    purchasePath.data.selectedProductOption = i,
                    a = i.product,
                    r = i.travelOption
                } else {
                    if (!e("#SelectProduct").val())
                        return void purchasePathApp.showModalError("Setup not prepared.");
                    a = e("#SelectProduct").val(),
                    r = e("#SelectTravelOption").val()
                }
                var s = {
                    product: a,
                    userID: purchasePath.data.myPointComfort.user.id,
                    productID: purchasePath.data.productId,
                    travelOption: r,
                    companyID: purchasePath.data.companyID,
                    plan: e("#PlanID") ? e("#PlanID").val() : null
                };
                e("#purchase-path-spinner").modal("show"),
                e.ajax({
                    url: PointComfort.API + "/api/purchase-path/init/",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(s)
                }).done(function(a) {
                    if (a.success) {
                        var r = purchasePath.data.trip.travelerGroups[0].travelers[0];
                        if (purchasePath.data.plans = [],
                        purchasePath.data.hasPricing = !0,
                        e.each(a.data.plans, function(t, a) {
                            a.hasPricing || (purchasePath.data.hasPricing = !1),
                            e.each(a.benefits, function(e, t) {
                                t.isIndividualized && t.selectedTravelers.push(new BenefitSelectedTravelerModel(1))
                            })
                        }),
                        purchasePath.data.company = a.data.company,
                        purchasePath.data.options.products = a.data.productOptions,
                        purchasePath.data.regions = a.data.regions,
                        purchasePath.data.countries = a.data.countries,
                        purchasePath.data.ageGroups = a.data.ageGroups,
                        purchasePath.data.settings.sections = a.data.sections,
                        purchasePath.data.travelOption = a.data.travelOption,
                        purchasePath.data.whiteLabels = a.data.whiteLabels,
                        purchasePath.data.options.travelerTypes = a.data.travelerTypes,
                        purchasePath.data.defaultTravelerType = a.data.defaultTravelerType,
                        purchasePath.data.options.previousTravelers = a.data.previousTravelers,
                        null != purchasePath.data.whiteLabels.planWhiteLabels[0].confirmationPageLink ? purchasePath.data.settings.successfulPurchaseRedirectUrl = a.data.whiteLabels.planWhiteLabels[0].confirmationPageLink : purchasePath.data.settings.successfulPurchaseRedirectUrl = e("#SuccessfulPurchaseRedirectUrl").val(),
                        a.data.user) {
                            purchasePath.data.myPointComfort.isNewUser = !1,
                            purchasePath.data.myPointComfort.user.id = a.data.user.id,
                            purchasePath.data.myPointComfort.user.email = a.data.user.email,
                            purchasePath.data.myPointComfort.user.firstName = a.data.user.firstName,
                            purchasePath.data.myPointComfort.user.lastName = a.data.user.lastName,
                            purchasePath.data.myPointComfort.user.fullName = a.data.user.firstName + " " + a.data.user.lastName;
                            let t = e("#purchase-path-traveler-list")
                              , r = e(t.find("select")[0])
                              , i = e(t.find(".error")[0]);
                            r.on("change", function() {
                                let a = e(t.find("input[name=group]")[0]).val()
                                  , r = purchasePath.data.trip.travelerGroups[a].travelers
                                  , s = e(this).val().length;
                                r.length + s > purchasePath.data.selectedProductOption.maxTravelersAllowed ? i.show() : i.hide()
                            })
                        }
                        r.travelerType = purchasePath.data.defaultTravelerType,
                        r.pricings = [],
                        r.returnDate = null,
                        purchasePathApp.departureDateChanged(r.departureDate),
                        r.travelDays = purchasePath.calculateDaysTraveled(r.departureDate, r.returnDate),
                        purchasePath.resetAvailableTravelerTypesRemainingForGroup(0),
                        purchasePath.resetDepartureDateSettingsForTraveler(0, 0),
                        purchasePath.resetReturnDateSettingsForTraveler(0, 0),
                        purchasePathApp.setCountries(),
                        purchasePathApp.setCompanyInfo();
                        var i = e.findFirst(purchasePath.data.options.products, function(e) {
                            return e.id == purchasePath.data.product
                        });
                        purchasePath.data.selectedProductOption = i,
                        purchasePath.data.hasPricing ? (purchasePath.data.plans = a.data.plans,
                        purchasePath.data.selectedPlan = e.findFirst(a.data.plans, function(e) {
                            return e.selected
                        }),
                        purchasePath.data.tempPlans = purchasePath.data.plans) : (e("html, body").animate({
                            scrollTop: 0
                        }, 200),
                        purchasePathApp.showModalError("Company " + purchasePath.data.companyID + " has no valid pricing data.")),
                        isFunction(t) && t(),
                        setTimeout(function() {
                            e("#purchase-path-spinner").modal("hide")
                        }, 200)
                    } else
                        purchasePathApp.showModalError("Purchase path init call failed.")
                }).fail(function() {
                    purchasePathApp.showModalError("Purchase path init call failed.")
                })
            },
            setCompanyInfo: function() {
                // Change the logo's path to: https://pcustoragewordpress.blob.core.windows.net/wordpress/ 
                var str = purchasePath.data.company.logoURL;
                if (str) {
                    var n = str.lastIndexOf('/');
                    var imgFileName = str.substring(n + 1);
                } else {
                    var imgFileName = 'pcu-travel-logo-color.svg';
                }
                // imgFileName ? imgFileName : pcu-travel-logo-color.svg;

                // Get the companyID
                var str = window.location.search;
                var s = str.lastIndexOf('=');
                var companyID = str.substring(s + 1);

                purchasePath.data.company ? (purchasePath.data.company.summaryInfo && e("#producer-details").html(purchasePath.data.company.summaryInfo),
                // purchasePath.data.company.logoURL ? (e("#default-producer").remove(),

                companyID ? (e("#default-producer").remove(),

                // e("#producer-logo").attr("src", purchasePath.data.company.logoURL),
                e("#producer-logo").attr("src", 'https://pcustoragewordpress.blob.core.windows.net/producer-logos/' + imgFileName),
                e("#producer-logo, #producer-details").fadeIn(500)) : e("#default-producer, #producer-details").fadeIn(500)) : e("#default-producer, #producer-details").fadeIn(500)
            },
            countryName: function(e) {
                return purchasePath.getCountryNameFromCode(e)
            },
            onPaymentTypeChange: function() {
                "paypal" != purchasePath.data.paymentType || validateStep(purchasePathApp.currentStep, !0) || purchasePathApp.showModalError("Please correct the errors in this step before continuing.", function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: e(".invalid").offset().top - 450
                    }, 200)
                })
            },
            dateOfBirthChangedWithIndex: function(e, t, a) {
                var r = this.trip.travelerGroups[e].travelers[t];
                r.dateOfBirth = a,
                r.ageGroup = purchasePath.calculateAgeGroupFromDateOfBirth(a),
                purchasePath.recalculatePricings(),
                this.filterPlansByAgeGroups(r),
                this.updatePlanPriceIndicator()
            },
            filterPlansByAgeGroups: function(e) {
                purchasePath.data.allTravelersAreWithinAgeGroupEightAndNine = purchasePath.data.trip.travelerGroups[0].travelers.every(e=>"8" === e.ageGroup || "9" === e.ageGroup),
                "TripTime-Default" === purchasePath.data.product && purchasePath.data.allTravelersAreWithinAgeGroupEightAndNine ? purchasePath.data.plans = purchasePath.data.plans.filter(e=>"GoTime" === e.id || "TrPlan1" === e.id) : e.dateOfBirth && (purchasePath.data.plans = purchasePath.data.tempPlans)
            },
            departureDateChanged: function(e) {
                e && (e = e.target ? e.target.valueAsDate : e),
                this.departureDateChangedWithIndex(0, 0, e)
            },
            departureDateChangedWithIndex: function(e, t, a) {
                var r = this.trip.travelerGroups[e].travelers[t];
                if (r.departureDate = a,
                r.travelDays = purchasePath.calculateDaysTraveled(a, r.returnDate),
                a && purchasePath.data.whiteLabels) {
                    var i = purchasePath.data.trip.includedUSTravel ? purchasePath.data.whiteLabels.minTripDaysUS : purchasePath.data.whiteLabels.minTripDaysNonUS;
                    if (i == (purchasePath.data.trip.includedUSTravel ? purchasePath.data.whiteLabels.maxTripDaysUS : purchasePath.data.whiteLabels.maxTripDaysNonUS)) {
                        var s = new moment(a).add(i, "days");
                        this.returnDateChangedWithIndex(e, t, s.toDate())
                    }
                }
                purchasePath.resetReturnDateSettingsForTraveler(e, t),
                purchasePath.recalculatePricings(),
                this.updatePlanPriceIndicator()
            },
            returnDateChanged: function(e) {
                e && (e = e.target ? e.target.valueAsDate : e),
                this.returnDateChangedWithIndex(0, 0, e)
            },
            returnDateChangedWithIndex: function(e, t, a) {
                var r = this.trip.travelerGroups[e].travelers[t];
                r.returnDate = a,
                r.travelDays = purchasePath.calculateDaysTraveled(r.departureDate, a),
                purchasePath.recalculatePricings(),
                this.updatePlanPriceIndicator()
            },
            planSelected: function(e) {
                purchasePath.data.selectedPlan = e;
                for (var t = 0; t < purchasePath.data.plans.length; t++) {
                    var a = purchasePath.data.plans[t];
                    a.id != e.id && (a.selected = !1)
                }
                this.updatePlanPriceIndicator()
            },
            planOptionsChanged: function(e) {
                "WorldExplorerBasic20" !== e.id && "GoTime20" !== e.id && "DiveGoTime20" !== e.id && "BusinessGoTime20" !== e.id && "MissionaryGoTime20" !== e.id || 2e6 !== e.maximum.selected && 5e3 !== e.deductible.selected || (purchasePath.data.selectedPlan = purchasePathApp._data.plans[1],
                purchasePathApp._data.plans[0].selected = !1,
                purchasePathApp._data.plans[1].selected = !0),
                purchasePath.recalculatePricingForPlan(e),
                this.updatePlanPriceIndicator()
            },
            benefitsToggled: function(e, t) {
                for (var a = purchasePathApp.plans, r = 0; r < a[1].benefits.length; r++)
                    if (t === a[1].benefits[r].id) {
                        var i = 0
                          , s = 0;
                        if (a[1].benefits[r].selected)
                            for (i = 0; i < a.length; i++)
                                for (s = 0; s < a[i].benefits.length; s++)
                                    t === a[i].benefits[s].id && (a[i].benefits[s].selected = !0,
                                    this.benefitToggled(a[i], a[i].benefits[s]));
                        else
                            for (i = 0; i < a.length; i++)
                                for (s = 0; s < a[i].benefits.length; s++)
                                    a[i].benefits[s].id === t && (a[i].benefits[s].selected = !1,
                                    this.benefitToggled(a[i], a[i].benefits[s]))
                    }
            },
            benefitToggled: function(t, a) {
                for (var r = 0; r < a.linkBenefitSelections.length; r++) {
                    var i = a.linkBenefitSelections[r]
                      , s = e.findFirst(t.benefits, function(e) {
                        return e.id == i
                    });
                    s && (s.selected = a.selected)
                }
                this.planOptionsChanged(t)
            },
            updatePlanPriceIndicator: function() {
                var t = "$" + purchasePathApp.selectedPlanPricing;
                purchasePath.data.selectedPlan && purchasePath.data.selectedPlan.useYearlyPricing || (t += "/day*"),
                t.length < 8 ? t = "&nbsp;&nbsp;&nbsp;&nbsp;" + t : t.length < 9 ? t = "&nbsp;&nbsp;&nbsp;" + t : t.length < 10 ? t = "&nbsp;&nbsp;" + t : t.length < 11 && (t = "&nbsp;" + t),
                e("#purchase-path #step3-quote-text").length ? e("#purchase-path #step3-quote-text tspan").html(t) : e("#purchase-path #step4-quote-text").length && e("#purchase-path #step4-quote-text tspan").html(t)
            },
            switchPlanTypeView: function(t) {
                t && t.preventDefault();
                for (var a = e(".plan-type-custom").is(":visible") ? "Standard" : "Custom", r = 0; r < this.plans.length; r++)
                    this.plans[r].selected = !1;
                var i = e.findFirst(this.plans, function(e) {
                    return a == e.type
                });
                i.selected = !0,
                this.selectedPlan = i,
                e(".plan-type-custom").is(":visible") ? e(".plan-type-custom").fadeOut(500, function() {
                    e(".plan-type-standard").fadeIn(500)
                }) : e(".plan-type-standard").fadeOut(500, function() {
                    e(".plan-type-custom").fadeIn(500)
                }),
                this.updatePlanPriceIndicator()
            },
            productSelected: function() {
                this.product && this.setup(function() {
                    purchasePath.data.trip.travelerGroups[0].travelers[0].ageGroup = purchasePath.calculateAgeGroupFromDateOfBirth(purchasePath.data.trip.travelerGroups[0].travelers[0].dateOfBirth),
                    purchasePath.recalculatePricings(),
                    purchasePathApp.updatePlanPriceIndicator()
                })
            },
            travelerTypeChanged: function(e, t, a) {
                purchasePath.enforceTravelerTypeMaximumsForGroup(e, t, a),
                purchasePath.resetAvailableTravelerTypesRemainingForGroup(e)
            },
            coverageAreaChanged: function() {
                this.setCountries(),
                e.findFirst(this.options.destinationCountries, function(e, t) {
                    return e.code == purchasePath.data.trip.destination
                }) || (this.trip.destination = null),
                e.each(this.trip.travelerGroups, function(t, a) {
                    e.each(a.travelers, function(t, a) {
                        e.findFirst(purchasePath.data.options.originCountries, function(e, t) {
                            return e.code == a.citizenship
                        }) || (a.citizenship = null)
                    })
                }),
                e.findFirst(this.options.billingAddressCountries, function(e, t) {
                    return purchasePath.data.primaryAddress.country == e.code
                }) || (this.primaryAddress.country = null,
                this.primaryAddressCountryChanged())
            },
            setCountries: function() {
                purchasePath.resetCountryOptions(),
                purchasePath.recalculatePricings(),
                this.updatePlanPriceIndicator()
            },
            primaryAddressCountryChanged: function() {
                "US" == this.primaryAddress.country && (e.findFirst(this.options.regions, function(e, t) {
                    return purchasePath.data.primaryAddress.stateOrRegion == e.code
                }) || (this.primaryAddress.stateOrRegion = null))
            },
            addTravelerGroup: function(e) {
                e && e.preventDefault();
                var t = purchasePath.data.trip.travelerGroups[0].travelers[0];
                purchasePath.data.trip.travelerGroups.push(new TravelerGroup);
                var a = new Traveler(purchasePath.data.defaultTravelerType);
                a.departureDate = t.departureDate,
                a.returnDate = t.returnDate,
                purchasePath.addTravelerToGroup(purchasePath.data.trip.travelerGroups.length - 1, a),
                this.updatePlanPriceIndicator()
            },
            addTravelerToGroup: function(e, t) {
                t && t.preventDefault();
                var a = purchasePath.data.trip.travelerGroups[e].travelers[0]
                  , r = new Traveler(purchasePath.getNextAvailableTravelerTypeForGroup(e));
                r.departureDate = a.departureDate,
                r.returnDate = a.returnDate,
                purchasePath.addTravelerToGroup(e, r),
                this.updatePlanPriceIndicator()
            },
            showExistingTravelersModalForGroup: function(t, a) {
                a && a.preventDefault();
                let r = e("#purchase-path-traveler-list")
                  , i = e(r.find("select")[0]);
                e(r.find("input[name=group]")[0]).val(t),
                i.find("option").remove(),
                e.each(purchasePath.data.options.previousTravelers, function(e, t) {
                    if (!purchasePath.previousTravelerExistsInTrip(t.rid)) {
                        let e = new moment(t.dateOfBirth)
                          , a = '<option value="' + t.rid + '">' + t.firstName + " " + t.lastName + "&nbsp;<span>(Date of birth " + e.format("MM/DD/YYYY") + ")</span></option>";
                        i.append(a)
                    }
                }),
                r.modal("show")
            },
            addSelectedExistingTravelersToGroup: function() {
                let t = e("#purchase-path-traveler-list")
                  , a = e(t.find("input[name=group]")[0]).val()
                  , r = e(t.find("select")[0]).val()
                  , i = e(t.find(".error")[0]);
                purchasePath.data.trip.travelerGroups[a].travelers.length + r.length > purchasePath.data.selectedProductOption.maxTravelersAllowed ? i.show() : (i.hide(),
                e.each(r, function(t, r) {
                    var i = purchasePath.data.trip.travelerGroups[a].travelers[0]
                      , s = new Traveler(purchasePath.data.defaultTravelerType);
                    let n = e.findFirst(purchasePath.data.options.previousTravelers, function(e, t) {
                        return r == e.rid
                    });
                    s.rid = n.rid,
                    s.dateOfBirth = n.dateOfBirth,
                    s.firstName = n.firstName,
                    s.lastName = n.lastName,
                    s.gender = n.gender.toLowerCase(),
                    s.citizenship = purchasePath.getCountryCodeFromName(n.countryOfOrigin),
                    s.email = n.email,
                    s.departureDate = i.departureDate,
                    s.returnDate = i.returnDate,
                    purchasePath.addTravelerToGroup(a, s)
                }),
                this.updatePlanPriceIndicator(),
                t.modal("hide"))
            },
            removeTravelerGroup: function(e) {
                var t = !0;
                purchasePath.data.trip.travelerGroups[e].travelers.length > 1 && (t = confirm("Removing the " + purchasePath.data.defaultTravelerType + " traveler will remove this entire group from the trip. Are you sure?")),
                t && (purchasePath.removeTravelerGroup(e),
                this.updatePlanPriceIndicator())
            },
            removeTravelerFromGroup: function(e, t) {
                purchasePath.removeTravelerFromGroup(e, t),
                this.updatePlanPriceIndicator()
            },
            chooseCSV: function() {
                e("input[name=csv-upload]").focus().trigger("click")
            },
            processCSV: function() {
                var t = e("input[name=csv-upload]")[0]
                  , a = t.files[0];
                if (t && a) {
                    var r = new FormData;
                    r.append("file", a),
                    e.ajax({
                        url: PointComfort.API + "/api/purchase-path/parse-traveler-csv/",
                        method: "POST",
                        data: r,
                        processData: !1,
                        contentType: !1,
                        cache: !1,
                        enctype: "multipart/form-data"
                    }).done(function(t) {
                        if (t.success) {
                            e.each(t.data, function(e, t) {
                                var a = 0 == e ? purchasePath.data.trip.travelerGroups[0].travelers[0] : new Traveler(purchasePath.getNextAvailableTravelerTypeForGroup(0));
                                a.firstName = t.firstName,
                                a.middleInitial = t.middleInitial,
                                a.lastName = t.lastName,
                                a.dateOfBirth = moment(t.dateOfBirth).toDate(),
                                a.departureDate = moment(t.departureDate).toDate(),
                                a.returnDate = moment(t.returnDate).toDate(),
                                a.gender = t.gender,
                                a.citizenship = t.citizenship,
                                a.email = t.emailAddress,
                                0 != e ? purchasePath.addTravelerToGroup(0, a) : (a.travelDays = purchasePath.calculateDaysTraveled(a.departureDate, a.returnDate),
                                a.ageGroup = purchasePath.calculateAgeGroupFromDateOfBirth(a.dateOfBirth))
                            }),
                            purchasePathApp.updatePlanPriceIndicator()
                        } else
                            console.log("Failed to parse csv.")
                    }).fail(function() {
                        console.log("Failed to upload csv.")
                    })
                }
            },
            showPassword: function(t) {
                var a = e("#register-password")
                  , r = e("#register-password-confirm");
                "password" == a.attr("type") ? (a.attr("type", "text"),
                r.attr("type", "text")) : (a.attr("type", "password"),
                r.attr("type", "password"))
            },
            usePrimaryInsuranceInformation: function(t, a, r) {
                if (e(r.target).is(":checked")) {
                    var i = t.travelers[0];
                    a.insuranceCompany = i.insuranceCompany,
                    a.policyNumber = i.policyNumber
                } else
                    a.insuranceCompany = null,
                    a.policyNumber = null
            },
            prepareSaveApplication: function() {
                e("#purchase-path-save-application").modal("show")
            },
            saveApplication: function() {
                var t = e("#purchase-path-save-application")
                  , a = e(t.find("input[name=email]")[0]).val()
                  , r = e("#SavedApplicationID").val()
                  , i = e("#EmailApplicationSubject").val()
                  , s = e("#EmailApplicationTemplate").val()
                  , n = e("#LoadApplicationURL").val()
                  , o = e("#EmailApplicationSuccessMessage").val()
                  , u = e(t.find(".error")[0]);
                if (isValidEmail(a)) {
                    u.hide(),
                    t.modal("hide");
                    var l = {
                        ID: r,
                        EmailAddress: a,
                        State: {
                            step: purchasePath.data.currentStep,
                            companyID: purchasePath.data.companyID,
                            selectedProductOptionID: purchasePath.data.selectedProductOption.id,
                            selectedPlan: {
                                id: purchasePath.data.selectedPlan.id,
                                maximum: purchasePath.data.selectedPlan.maximum.selected,
                                deductible: purchasePath.data.selectedPlan.deductible.selected,
                                selectedBenefitIDs: []
                            },
                            primaryAddress: purchasePath.data.primaryAddress,
                            trip: JSON.parse(JSON.stringify(purchasePath.data.trip)),
                            myPointComfort: JSON.parse(JSON.stringify(purchasePath.data.myPointComfort))
                        }
                    };
                    e.each(purchasePath.data.selectedPlan.benefits, function(e, t) {
                        t.selected && l.State.selectedPlan.selectedBenefitIDs.push(t.id)
                    }),
                    e.each(l.State.trip.travelerGroups, function(t, a) {
                        e.each(a.travelers, function(e, t) {
                            t.pricings = null
                        })
                    }),
                    l.State.myPointComfort.password = null,
                    l.State.myPointComfort.passwordRepeated = null,
                    e.ajax({
                        url: PointComfort.API + "/api/purchase-path/application/save",
                        method: "POST",
                        data: JSON.stringify(l),
                        contentType: "application/json",
                        cache: !1
                    }).done(function(t) {
                        if (r)
                            purchasePathApp.showModalMessage("Success", "Application saved.");
                        else {
                            (async()=>{
                                const r = await purchasePath.emailSavedApplication(a, t.data.id, n, i, s);
                                r && r.success ? (e("#SavedApplicationID").val(t.data.id),
                                purchasePathApp.showModalMessage("Success", o)) : purchasePathApp.showModalError(PointComfort.Errors.SaveApplicationFailed)
                            }
                            )()
                        }
                    }).fail(function(e) {
                        purchasePathApp.showModalError(PointComfort.Errors.SaveApplicationFailed)
                    })
                } else
                    u.show()
            },

            sendToPurchasePath: function(t) {
                if (purchasePath.data.selectedPlan.validates) {
                    var a = {
                        companyID: purchasePath.data.companyID,
                        selectedProductId: purchasePath.data.product,
                        productOptions: purchasePath.data.options.products,
                        trip: purchasePath.data.trip,
                        selectedPlan: purchasePath.data.selectedPlan,
                        plans: purchasePath.data.plans
                    };
                    
                        e("#Payload").val(encodeURIComponent(JSON.stringify(a)));
                        e('.quote-engine .checkout-form').submit();
                    };
            },
            processCheckout: async function(t) {
                if (t && t.preventDefault(),
                validateStep(purchasePathApp.currentStep, !0)) {
                    e("html, body").animate({
                        scrollTop: 0
                    }, 200),
                    e("#purchase-path-spinner").modal("show");
                    try {
                        await purchasePath.processCheckout()
                    } catch (t) {
                        onSpinnerClose = function() {
                            purchasePathApp.showModalError(t.message)
                        }
                        ,
                        setTimeout(function() {
                            e("#purchase-path-spinner").modal("hide")
                        }, 500)
                    }
                } else
                    purchasePathApp.showModalError("Please correct the errors in this step before continuing.", function() {
                        e([document.documentElement, document.body]).animate({
                            scrollTop: e(".invalid").offset().top - 450
                        }, 200)
                    })
            },
            showModalMessage: function(t, a, r) {
                onSpinnerClose = null,
                onModalClose = r,
                e("html, body").animate({
                    scrollTop: 0
                }, 200),
                e("#purchase-path-message").find(".modal-title").text(t),
                e("#purchase-path-message").find(".message").html(a),
                e("#purchase-path-message").modal("show")
            },
            showModalError: function(t, a) {
                onSpinnerClose = null,
                onModalClose = a,
                e("html, body").animate({
                    scrollTop: 0
                }, 200),
                e("#purchase-path-message").find(".modal-title").text("Error"),
                e("#purchase-path-message").find(".message").html(t),
                e("#purchase-path-message").modal("show")
            },
            showQuoteEnginePreviousStep: function(t) {
                t && t.preventDefault(),
                this.showQuoteEngineStep(purchasePathApp.currentStep - 1, function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: e(".start-your-quote").offset().top
                    }, 200)
                })
            },
            planOptionChanged: function(e) {
                if ("single" === e)
                    this.$emit("changed", this.plan);
                else
                    for (var t = purchasePathApp.plans[0].deductible.selected, a = purchasePathApp.plans[0].maximum.selected, r = 0; r < purchasePathApp.plans.length; r++)
                        purchasePathApp.plans[r].deductible.selected = t,
                        purchasePathApp.plans[r].maximum.selected = a,
                        this.$emit("changed", this.planOptionsChanged(purchasePathApp.plans[r]))
            },
            showQuoteEngineNextStep: function(t) {
                t && t.preventDefault(),
                validateStep(purchasePathApp.currentStep, !1) ? purchasePathApp.showQuoteEngineStep(purchasePathApp.currentStep + 1, function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: e(".start-your-quote").offset().top
                    }, 200)
                }) : purchasePathApp.showModalError("Please correct the errors in this step before continuing.", function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: e(".invalid").offset().top - 250
                    }, 200)
                })
            },
            showQuoteEngineStep: function(t, a) {
                var r = e(".quote-engine .checkout")
                  , i = e(".quote-engine .previous-step")
                  , s = e(".quote-engine .next-step");
                purchasePathApp.currentStep = t,
                1 == t ? (i.hide(),
                s.show()) : 4 == t ? (i.show(),
                s.hide(),
                r.show()) : (i.show(),
                s.show(),
                r.hide());
                var n = isFunction(a) ? a : null;
                e(".step:visible").length ? e(".step:visible").fadeOut(500, function() {
                    e(".step-" + t).fadeIn(500, n)
                }) : e(".step-" + t).fadeIn(500, n)
            },
            showPurchasePathPreviousStep: function(t) {
                t && t.preventDefault(),
                this.showPurchasePathStep(purchasePathApp.currentStep - 1, function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: e(".indicators").offset().top
                    }, 200)
                })
            },
            showPurchasePathNextStep: function(t) {
                t && t.preventDefault(),
                validateStep(purchasePathApp.currentStep, !0) ? this.showPurchasePathStep(purchasePathApp.currentStep + 1, function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: 0
                    }, 200)
                }) : purchasePathApp.showModalError("Please correct the errors in this step before continuing.", function() {
                    e([document.documentElement, document.body]).animate({
                        scrollTop: e(".invalid").offset().top - 450
                    }, 200)
                })
            },
            showPurchasePathStep: function(t, a) {
                var r = isFunction(a) ? a : null;
                purchasePathApp.currentStep = t,
                e(".step:visible").length ? e(".step:visible").fadeOut(500, function() {
                    e(".step-" + t).fadeIn(500, function() {
                        purchasePathApp.startWithCustomPlan && "Standard" == purchasePathApp.visiblePlanType && purchasePathApp.switchPlanTypeView(),
                        r && r()
                    })
                }) : e(".step-" + t).fadeIn(500, r),
                e(".overview:visible").length ? e(".overview:visible").fadeOut(500, function() {
                    e(".overview-" + t).fadeIn(500)
                }) : e(".overview-" + t).fadeIn(500)
            },
            canAddNewTravelerToGroup: function(e) {
                return this.trip.travelerGroups.length && purchasePath.canAddNewTravelerToGroup(e)
            },
            addTravelerButtonText: function(t) {
                var a = purchasePath.getAvailableTravelerTypesRemainingForGroup(t);
                if (0 == a.length)
                    return "Traveler";
                if (1 == a.length)
                    return a[0];
                var r = "";
                return e.each(a, function(e, t) {
                    r = 0 == e ? t : r + "/" + t
                }),
                r
            },
            hasProduct: function(e) {
                return purchasePath.data.options.products.some(t=>t.product === e)
            }
        },
        computed: {
            isTripTime: function() {
                return this.settings.sections && this.selectedProductOption && "TripTime" == this.selectedProductOption.product
            },
            isBuildTimeProduct: function() {
                return this.settings.sections && this.selectedProductOption && "TrPlan1" == this.selectedProductOption.product
            },
            isTripTime2020: function() {
                return this.settings.sections && this.selectedProductOption && "TripTime2020" == this.selectedProductOption.product
            },
            isDiveTime: function() {
                return this.settings.sections && this.selectedProductOption && "DiveTime" == this.selectedProductOption.product
            },
            isWorldExpl2020: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExpl2020" == this.selectedProductOption.product
            },
            isStudentTime: function() {
                return this.settings.sections && this.selectedProductOption && "StudentTime" == this.selectedProductOption.product
            },
            isAnyTime: function() {
                return this.settings.sections && this.selectedProductOption && "AnyTime" == this.selectedProductOption.product
            },
            isBuildTime: function() {
                return this.settings.sections && this.selectedPlan && "BuildTime" == this.selectedPlan.name
            },
            isWorldExpl: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExpl" == this.selectedProductOption.product
            },
            isWorldExplStudent: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExplStudent" == this.selectedProductOption.product
            },
            isWorldExplMulti: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExplMulti" == this.selectedProductOption.product
            },
            isWorldExplFlex: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExplFlex" == this.selectedProductOption.product
            },
            isWorldExplMax: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExplMax" == this.selectedProductOption.product
            },
            isWorldExplMax2020: function() {
                return this.settings.sections && this.selectedProductOption && "WorldExplMax2020" == this.selectedProductOption.product
            },
            isVolPr1: function() {
                return this.settings.sections && this.selectedProductOption && "VolPr1" == this.selectedProductOption.product
            },
            isElite: function() {
                return this.settings.sections && this.selectedProductOption && "Elite" == this.selectedProductOption.product
            },
            isEssential: function() {
                return this.settings.sections && this.selectedProductOption && "Essential" == this.selectedProductOption.product
            },
            isBudget: function() {
                return this.settings.sections && this.selectedProductOption && "Budget" == this.selectedProductOption.product
            },
            isBasVolPr1: function() {
                return this.settings.sections && this.selectedProductOption && "BasVolPr1" == this.selectedProductOption.product
            },
            destinationName: function() {
                return this.trip.destination ? this.countryName(this.trip.destination) : "Destination"
            },
            departureDate: {
                get: function() {
                    var e = this.trip.travelerGroups[0].travelers[0].departureDate;
                    return e ? new moment(e).format("YYYY-MM-DD") : null
                },
                set: function(e) {
                    this.departureDateChangedWithIndex(0, 0, e ? new moment(e).toDate() : null)
                }
            },
            returnDate: {
                get: function() {
                    var e = this.trip.travelerGroups[0].travelers[0].returnDate;
                    return e ? new moment(e).format("YYYY-MM-DD") : null
                },
                set: function(e) {
                    this.returnDateChangedWithIndex(0, 0, e ? new moment(e).toDate() : null)
                }
            },
            earliestDepartureDate: function() {
                for (var e = this.trip.travelerGroups[0].travelers[0].departureDate, t = 0; t < this.trip.travelerGroups.length; t++)
                    for (var a = 0; a < this.trip.travelerGroups[t].travelers.length; a++) {
                        var r = this.trip.travelerGroups[t].travelers[a];
                        moment(r.departureDate).isBefore(moment(e)) && (e = r.departureDate)
                    }
                return formatDate(e, "Departure Date", "MMM D, YYYY")
            },
            latestReturnDate: function() {
                for (var e = this.trip.travelerGroups[0].travelers[0].returnDate, t = 0; t < this.trip.travelerGroups.length; t++)
                    for (var a = 0; a < this.trip.travelerGroups[t].travelers.length; a++) {
                        var r = this.trip.travelerGroups[t].travelers[a];
                        moment(r.returnDate).isAfter(moment(e)) && (e = r.returnDate)
                    }
                return formatDate(e, "Return Date", "MMM D, YYYY")
            },
            departureDateError: function() {
                return "Departure date must be no earlier than tomorrow and within " + (this.whiteLabels ? this.whiteLabels.advancedDepartureDate : "X") + " days."
            },
            returnDateError: function() {
                return "Return date must be after the departure date and within " + (this.whiteLabels ? this.whiteLabels.maxTripDaysUS : "X") + " days of departure date."
            },
            tripLengthCanOnlyBeOneDay: function() {
                return !!this.whiteLabels && (this.trip.includedUSTravel ? this.whiteLabels.minTripDaysUS : this.whiteLabels.minTripDaysNonUS) == (this.trip.includedUSTravel ? this.whiteLabels.maxTripDaysUS : this.whiteLabels.maxTripDaysNonUS)
            },
            hasMultiplePlans: function() {
                return this.plans && this.plans.length > 1
            },
            hasCustomPlans: function() {
                if (this.plans && this.plans.length)
                    for (var e = 0; e < this.plans.length; e++)
                        if ("Custom" === this.plans[e].type)
                            return !0;
                return !1
            },
            hasStandardPlans: function() {
                if (this.plans && this.plans.length)
                    for (var e = 0; e < this.plans.length; e++)
                        if ("Standard" === this.plans[e].type)
                            return !0;
                return !1
            },
            customPlanTitle: function() {
                if (!this.plans.length)
                    return "";
                var t = [];
                return e.each(this.plans, function(e, a) {
                    "Custom" == a.type && t.push(a)
                }),
                1 == t.length ? t[0].name : "Custom Plans"
            },
            startWithCustomPlan: function() {
                var t = e("#SelectedPlan").val();
                if (t) {
                    var a = e.findFirst(purchasePath.data.plans, function(e) {
                        return e.id == t
                    });
                    return a && "Custom" == a.type
                }
                return !1
            },
            visiblePlanType: function() {
                return purchasePath.data.selectedPlan ? purchasePath.data.selectedPlan.type : null
            },
            selectedPlanPricing: function() {
                return this.selectedPlan && 0 != this.selectedPlan.total ? this.selectedPlan.useYearlyPricing ? this.selectedPlan.total.toFixed(2) : this.selectedPlan.perDayCalculated.toFixed(2) : "_.__"
            }
        },
        watch: {
            product: function(e, t) {
                if ((this.trip.travelerGroups.length > 1 || this.trip.travelerGroups[0].travelers.length > 1) && confirm("Changing the product type will remove additional travelers and reset the process. Do you wish to change your travel plans?")) {
                    var a = this.trip.travelerGroups[0]
                      , r = a.travelers[0];
                    r.pricings = [],
                    a.travelers = [r],
                    this.trip.travelerGroups = [a]
                }
            }
        }
    })).updatePlanPriceIndicator()
});

var queryString = window.location.search
  , urlParams = new URLSearchParams(queryString)
  , companyId = urlParams.get("companyId");
function GoogleAnalytics(e) {
    var t = document.createElement("script");
    t.setAttribute("src", "https://www.googletagmanager.com/gtag/js?id=" + e),
    t.setAttribute("async", "true");
    var a = document.head;
    function r() {
        dataLayer.push(arguments)
    }
    a.insertBefore(t, a.firstElementChild),
    window.dataLayer = window.dataLayer || [],
    r("js", new Date),
    r("config", "UA-145463601-6")
}
function FacebookPixels(e) {
    var t, a, r, i, s, n;
    t = window,
    a = document,
    r = "script",
    t.fbq || (i = t.fbq = function() {
        i.callMethod ? i.callMethod.apply(i, arguments) : i.queue.push(arguments)
    }
    ,
    t._fbq || (t._fbq = i),
    i.push = i,
    i.loaded = !0,
    i.version = "2.0",
    i.queue = [],
    (s = a.createElement(r)).async = !0,
    s.src = "https://connect.facebook.net/en_US/fbevents.js",
    (n = a.getElementsByTagName(r)[0]).parentNode.insertBefore(s, n)),
    fbq("init", e),
    fbq("track", "PageView");
    let o = document.createElement("noscript")
      , u = document.createElement("img");
    u.setAttribute("src", "https://www.facebook.com/tr?id=" + e + "&ev=PageView&noscript=1"),
    u.setAttribute("height", "1"),
    u.setAttribute("width", "1"),
    u.setAttribute("style", "display:none"),
    o.appendChild(u)
}
"DTP84018809601" === companyId && (GoogleAnalytics("G-6S6D0RXHDL"),
FacebookPixels("230647388844867")),
GoogleAnalytics("UA-145463601-6"),
jQuery(document).ready(function(e) {
    function t() {
        purchasePathApp.showQuoteEngineStep(1)
    }
    function a() {
        validateStep(1, !1) && purchasePathApp.showQuoteEngineStep(2)
    }
    function r() {
        validateStep(1, !1) && validateStep(2, !1) && purchasePathApp.showQuoteEngineStep(3)
    }
    function i() {
        validateStep(1, !1) && validateStep(2, !1) && validateStep(3, !1) && purchasePathApp.showQuoteEngineStep(4)
    }
    function s() {
        purchasePathApp.showPurchasePathStep(1)
    }
    function n() {
        validateStep(1, !0) && purchasePathApp.showPurchasePathStep(2)
    }
    function o() {
        validateStep(1, !0) && validateStep(2, !0) && purchasePathApp.showPurchasePathStep(3)
    }
    function u() {
        validateStep(1, !0) && validateStep(2, !0) && validateStep(3, !0) && purchasePathApp.showPurchasePathStep(4)
    }
    e(".quote-engine").length ? (e("#step1-circle circle").bind("click", t),
    e("#step1-icon-restart").bind("click", t),
    e("#step1-label").bind("click", t),
    e("#step2-circle circle").bind("click", a),
    e("#step2-icon-complete").bind("click", a),
    e("#step2-label").bind("click", a),
    e("#step3-circle circle").bind("click", r),
    e("#step3-icon-completed").bind("click", r),
    e("#step3-label").bind("click", r),
    e("#step4-oval rect").bind("click", i),
    e("#step4-quote-text tspan").bind("click", i),
    e("#step4-label").bind("click", i)) : e(".purchase-path").length && (e("#step2-circle circle").bind("click", s),
    e("#step2-icon-completed").bind("click", s),
    e("#step2-label").bind("click", s),
    e("#step3-oval rect").bind("click", n),
    e("#step3-quote-text tspan").bind("click", n),
    e("#step3-label").bind("click", n),
    e("#step4-circle circle").bind("click", o),
    e("#step4-icon-completed").bind("click", o),
    e("#step4-label").bind("click", o),
    e("#step5-circle circle").bind("click", u),
    e("#step5-icon-completed").bind("click", u),
    e("#step5-label").bind("click", u))
}),

jQuery(document).ready(function(e) {
    e("#paypal-button-container").length && paypal && isFunction(paypal.Buttons) && paypal.Buttons({
        style: {
            layout: "horizontal",
            color: "blue",
            tagline: !1,
            shape: "pill"
        },
        createOrder: async function(t, a) {
            e("html, body").animate({
                scrollTop: 0
            }, 200),
            e("#purchase-path-spinner").modal("show");
            try {
                if (!validateStep(4, !0))
                    throw new Error("You have errors on this step. Please verify all fields before continuing.");
                t = await purchasePath.processTempDataSave()
            } catch (t) {
                throw e("#purchase-path-spinner").modal("hide"),
                t
            }
            return a.order.create({
                purchase_units: [{
                    custom: t.tripId,
                    amount: {
                        value: purchasePath.data.selectedPlan.total.toFixed(2)
                    }
                }]
            })
        },
        onApprove: function(t, a) {
            return a.order.capture().then(async function(a) {
                try {
                    let a = await purchasePath.processDataSave(t.orderID);
                    if (!a.success)
                        throw new Error(a.message)
                } catch (t) {
                    throw e("#purchase-path-spinner").modal("hide"),
                    t
                }
                purchasePath.finalizePurchase()
            })
        },
        onCancel: function() {
            e("#purchase-path-spinner").modal("hide"),
            setTimeout(function() {
                purchasePathApp.showModalMessage("Canceled", "PayPal payment canceled by user.")
            }, 500)
        },
        onError: function(t) {
            e("#purchase-path-spinner").modal("hide"),
            setTimeout(function() {
                purchasePathApp.showModalError(t)
            }, 500)
        }
    }).render("#paypal-button-container")
});


class PurchasePath {
    constructor() {
        this._data = new PurchasePathModel
    }
    get data() {
        return this._data
    }
    addTravelerToGroup(e, t) {
        t.id = 0,
        $.each(this._data.trip.travelerGroups, function(e, a) {
            $.each(a.travelers, function(e, a) {
                a.id >= t.id && (t.id = a.id + 1)
            })
        }),
        t.travelDays = this.calculateDaysTraveled(t.departureDate, t.returnDate),
        t.ageGroup = this.calculateAgeGroupFromDateOfBirth(t.dateOfBirth),
        this._data.trip.travelerGroups[e].travelers.push(t);
        var a = this._data.trip.travelerGroups[e].travelers.length - 1;
        $.each(this._data.plans, function(e, a) {
            $.each(a.benefits, function(e, a) {
                a.isIndividualized && purchasePath.benefitAllowsTravelerType(a, t.travelerType) && a.selectedTravelers.push(new BenefitSelectedTravelerModel(t.id))
            })
        }),
        this.resetDepartureDateSettingsForTraveler(e, a),
        this.resetReturnDateSettingsForTraveler(e, a),
        this.recalculatePricings(),
        this.resetAvailableTravelerTypesRemainingForGroup(e)
    }
    benefitAllowsTravelerType(e, t) {
        return null != $.findFirst(e.allowedTravelerTypes, function(e) {
            return e == t
        })
    }
    removeTravelerGroup(e) {
        var t = this._data.trip.travelerGroups[e];
        this._data.plans;
        $.each(t.travelers, function(e, t) {
            purchasePath.removeTravelerFromIndividualizedBenefits(t)
        }),
        this._data.trip.travelerGroups.splice(e, 1),
        purchasePath.recalculatePricings()
    }
    removeTravelerFromGroup(e, t) {
        var a = this._data.trip.travelerGroups[e].travelers[t];
        purchasePath.removeTravelerFromIndividualizedBenefits(a),
        this._data.trip.travelerGroups[e].travelers.splice(t, 1),
        purchasePath.resetAvailableTravelerTypesRemainingForGroup(e),
        purchasePath.recalculatePricings(),
        purchasePathApp.filterPlansByAgeGroups(a)
    }
    removeTravelerFromIndividualizedBenefits(e) {
        $.each(this._data.plans, function(t, a) {
            $.each(a.benefits, function(t, a) {
                purchasePath.removeTravelerFromIndividualizedBenefit(a, e)
            })
        })
    }
    removeTravelerFromIndividualizedBenefit(e, t) {
        if (e.isIndividualized) {
            var a = null;
            $.each(e.selectedTravelers, function(e, r) {
                if (r.travelerID == t.id)
                    return a = e,
                    !1
            }),
            e.selectedTravelers.splice(a, 1)
        }
    }
    canAddNewTravelerToGroup(e) {
        return !!this.data.selectedProductOption && (!1 !== this.getNextAvailableTravelerTypeForGroup(e) && this.data.trip.travelerGroups[e].travelers.length < this.data.selectedProductOption.maxTravelersAllowed)
    }
    enforceTravelerTypeMaximumsForGroup(e, t, a) {
        var r = this.data.trip.travelerGroups[e].travelers[t];
        if (this.getTravelerCountByTravelerTypeForGroup(e, a) < this.getMaximumForTravelerType(r.travelerType)) {
            var i = $.findFirst(this.data.trip.travelerGroups[e].travelers, function(e, a) {
                return e.travelerType == r.travelerType && a != t
            });
            i && (i.travelerType = this.getNextAvailableTravelerTypeForGroup(e))
        }
    }
    getNextAvailableTravelerTypeForGroup(e) {
        for (var t = 0; t < this._data.options.travelerTypes.length; t++) {
            var a = this._data.options.travelerTypes[t]
              , r = this.getMaximumForTravelerType(a.id);
            if (this.getTravelerCountByTravelerTypeForGroup(e, a.id) < r || -1 == r)
                return a.id
        }
        return !1
    }
    getNextAvailablePreviousTraveler() {
        for (var e = 0; e < this._data.options.previousTravelers.length; e++) {
            return this._data.options.previousTravelers[e]
        }
        return null
    }
    previousTravelerExistsInTrip(e) {
        for (var t = 0; t < this._data.trip.travelerGroups.length; t++)
            for (var a = 0; a < this._data.trip.travelerGroups[t].travelers.length; a++)
                if (e == this._data.trip.travelerGroups[t].travelers[a].rid)
                    return !0;
        return !1
    }
    getAvailableTravelerTypesRemainingForGroup(e) {
        for (var t = [], a = 0; a < this._data.options.travelerTypes.length; a++) {
            var r = this._data.options.travelerTypes[a]
              , i = this.getMaximumForTravelerType(r.id);
            (this.getTravelerCountByTravelerTypeForGroup(e, r.id) < i || -1 == i) && t.push(r.id)
        }
        return t
    }
    getTravelerCountByTravelerTypeForGroup(e, t) {
        return $.grep(this._data.trip.travelerGroups[e].travelers, function(e) {
            return e.travelerType == t
        }).length
    }
    getMaximumForTravelerType(e) {
        var t = $.findFirst(this._data.travelOption.travelerTypeMaximums, function(t) {
            return t.travelerTypeID == e
        });
        return t ? t.maximum : 0
    }
    resetAvailableTravelerTypesRemainingForGroup(e) {
        this.data.trip.travelerGroups[e].availableTravelerTypesRemaining = [],
        $.each(this.data.options.travelerTypes, function(t, a) {
            if (a.isChangeable) {
                var r = purchasePath.getTravelerCountByTravelerTypeForGroup(e, a.id)
                  , i = purchasePath.getMaximumForTravelerType(a.id);
                0 != i && (-1 == i || r <= i) && purchasePath.data.trip.travelerGroups[e].availableTravelerTypesRemaining.push(a)
            }
        })
    }
    calculateAgeGroupFromDateOfBirth(e) {
        if (this._data.ageGroups)
            for (var t = this.calculateAgeFromDateOfBirth(e), a = 0; a < this._data.ageGroups.length; a++) {
                var r = this._data.ageGroups[a];
                if (t >= r.minAge && t <= r.maxAge)
                    return r.id
            }
        return null
    }
    calculateAgeFromDateOfBirth(e) {
        return moment().diff(moment(e), "years", !1)
    }
    calculateDaysTraveled(e, t) {
        if (!e || !t)
            return 0;
        var a = new moment(e).hours(0).minutes(0).seconds(0);
        return new moment(t).hours(0).minutes(0).seconds(0).diff(a, "days") + 1
    }
    resetCountryOptions() {
        this._data.trip.includesUSTravel ? (this._data.options.destinationCountries = this._data.countries.nonUSDestinationCountries,
        this._data.options.homeCountries = this._data.countries.nonUSHomeCountries,
        this._data.options.originCountries = this._data.countries.nonUSOriginCountries,
        this._data.options.billingAddressCountries = this._data.countries.nonUSBillingAddressCountries,
        this._data.options.regions = this._data.regions) : (this._data.options.destinationCountries = this._data.countries.usDestinationCountries,
        this._data.options.homeCountries = this._data.countries.usHomeCountries,
        this._data.options.originCountries = this._data.countries.usOriginCountries,
        this._data.options.billingAddressCountries = this._data.countries.usBillingAddressCountries,
        this._data.options.regions = this._data.regions)
    }
    resetDepartureDateSettingsForTraveler(e, t) {
        var a = this._data.trip.travelerGroups[e].travelers[t]
          , r = new moment(moment().format("YYYY-MM-DD") + " 00:00:00").add(1, "days");
        if (a.settings.departureDate.disabledDates.to = r.toDate(),
        a.settings.departureDate.disabledDates.from = null,
        a.settings.departureDate.openDate = null,
        this._data.whiteLabels) {
            var i = r.add(this._data.whiteLabels.advancedDepartureDate, "days");
            a.settings.departureDate.disabledDates.from = i.toDate()
        }
    }
    resetReturnDateSettingsForTraveler(e, t) {
        var a = this._data.trip.travelerGroups[e].travelers[t]
          , r = a.departureDate ? new moment(a.departureDate).hours(0).minutes(0).seconds(0) : new moment(moment().format("YYYY-MM-DD") + " 00:00:00")
          , i = a.departureDate ? new moment(a.departureDate).hours(0).minutes(0).seconds(0) : new moment(moment().format("YYYY-MM-DD") + " 00:00:00")
          , s = 1;
        if (purchasePath.data.whiteLabels && (s = purchasePath.data.trip.includesUSTravel ? purchasePath.data.whiteLabels.minTripDaysUS : purchasePath.data.whiteLabels.minTripDaysNonUS),
        i.add(s, "days"),
        a.settings.returnDate.disabledDates.to = i.toDate(),
        a.settings.returnDate.disabledDates.from = null,
        a.settings.returnDate.openDate = i.toDate(),
        this._data.whiteLabels) {
            var n = this._data.trip.includesUSTravel ? this._data.whiteLabels.maxTripDaysUS : this._data.whiteLabels.maxTripDaysNonUS;
            a.settings.returnDate.disabledDates.from = moment(r).add(n - 1, "days").toDate()
        }
    }
    getCountryNameFromCode(e) {
        if (!this._data.countries || !e)
            return "";
        var t = $.findFirst(this._data.countries.all, function(t, a) {
            return t.code.toLowerCase() === e.toLowerCase()
        });
        return t ? t.name : ""
    }
    getCountryCodeFromName(e) {
        if (!this._data.countries || !e)
            return "";
        var t = $.findFirst(this._data.countries.all, function(t, a) {
            return t.name.toLowerCase() === e.toLowerCase()
        });
        return t ? t.code : ""
    }
    buildTravelerTiers(e, t) {
        var a = [];
        if (!e.useTierPricing)
            return a;
        for (var r = Array.from(t.travelers), i = 0; i < e.tiers.length; i++) {
            for (var s = e.tiers[i], n = new TierModel(s.id,s.name,s.pricedPerTraveler,s.useTravelerType), o = 0; o < s.travelerTypeMaximums.length; o++) {
                for (var u = s.travelerTypeMaximums[o], l = -1 == u.maximum ? r.length + 1 : u.maximum, d = 0; d < l; d++) {
                    var p = null
                      , c = $.findFirst(r, function(e, t) {
                        return p = t,
                        e.travelerType == u.travelerTypeID
                    });
                    if (c && (n.travelers.push(c),
                    r.splice(p, 1)),
                    n.travelers.length == s.maximum)
                        break
                }
                if (n.travelers.length == s.maximum)
                    break
            }
            a.push(n)
        }
        return a
    }
    getTierForTraveler(e, t) {
        for (var a = null, r = 0; r < e.length; r++) {
            if ($.findFirst(e[r].travelers, function(e, a) {
                return e.id == t.id
            })) {
                a = e[r];
                break
            }
        }
        return a
    }
    recalculatePricings() {
        for (var e = 0; e < this._data.plans.length; e++)
            this.recalculatePricingForPlan(this._data.plans[e])
    }
    recalculatePricingForPlanId(e) {
        var t = $.findFirst(this._data.plans, function(t, a) {
            return t.id == e
        });
        t && this.recalculatePricingForPlan(t)
    }
    recalculatePricingForPlan(e) {
        var t = 0
          , a = this._data.trip.travelerGroups.length;
        e.total = 0,
        e.validates = !0;
        for (var r = 0; r < a; r++)
            for (var i = this._data.trip.travelerGroups[r], s = this.buildTravelerTiers(e, i), n = [], o = 0; o < i.travelers.length; o++) {
                var u = i.travelers[o];
                if (u.ageGroup && u.travelDays) {
                    t += u.travelDays;
                    var l = this.getTierForTraveler(s, u)
                      , d = this.calculatePricingForTravelerAndPlan(this._data.trip, e, r, o, l);
                    if (this.addPricingToTraveler(u, e.id, d),
                    d.validates || (e.validates = !1),
                    e.useTierPricing)
                        if (l.pricedPerTraveler)
                            e.total += d.total;
                        else
                            $.findFirst(n, function(e, t) {
                                return e == l.id
                            }) || (e.total += round(d.maximum * d.deductible, 2),
                            n.push(l.id)),
                            e.total += d.benefitsTotal;
                    else
                        e.total += d.total
                }
            }
        e.groupDiscountPercentage && a >= e.minimumGroupsRequiredForDiscount && (e.total -= e.total / e.groupDiscountPercentage),
        "WorldExplorerBasic20" !== e.id && "GoTime20" !== e.id && "DiveGoTime20" !== e.id && "BusinessGoTime20" !== e.id && "MissionaryGoTime20" !== e.id || 2e6 !== e.maximum.selected && 5e3 !== e.deductible.selected ? e.perDayCalculated = e.useYearlyPricing ? e.total / e.maxCoverageDaysPerYear : e.total / t : e.perDayCalculated = 0
    }
    calculatePricingForTravelerAndPlan(e, t, a, r, i) {
        var s = new TravelerPricingModel
          , n = this._data.defaultTravelerType
          , o = null
          , u = e.travelerGroups[a]
          , l = u.travelers[r]
          , d = 1 === e.travelerGroups.length && 1 === u.travelers.length
          , p = this._data.trip.includesUSTravel
          , c = t.maximum.selected
          , h = p ? t.maximum.usInboundPricings : t.maximum.usOutboundPricings
          , m = p ? t.maximum.usInboundSingleTravelerInAgeGroupPricings : t.maximum.usOutboundSingleTravelerInAgeGroupPricings
          , v = t.deductible.selected
          , f = p ? t.deductible.usInboundPricings : t.deductible.usOutboundPricings
          , P = null;
        d && (P = $.findFirst(m, function(e, t) {
            return e.ageGroupID == l.ageGroup && e.option == c
        })),
        P || (P = $.findFirst(h, function(e, a) {
            return t.useTierPricing ? (e.ageGroupID == l.ageGroup || !e.ageGroupID) && e.travelerType == i.useTravelerType : n == e.travelerType || o ? purchasePath.pricingMatchesTravelerTypeAgeGroupAndOption(e, c, l, o) : (e.ageGroupID == l.ageGroup || !e.ageGroupID) && e.travelerType == l.travelerType
        }));
        var g = $.findFirst(f, function(e, t) {
            return n == e.travelerType || o ? purchasePath.pricingMatchesTravelerTypeAgeGroupAndOption(e, v, l, o) : (e.ageGroupID == l.ageGroup || !e.ageGroupID) && e.travelerType == l.travelerType
        });
        if (P ? (s.maximum = P.value,
        t.useTierPricing && !i.pricedPerTraveler && (i.tierPrice = P.value)) : s.validates = !1,
        g ? s.deductible = g.value : s.validates = !1,
        t.benefits)
            for (var y = 0; y < t.benefits.length; y++) {
                var T = t.benefits[y];
                if (purchasePath.benefitAllowsTravelerType(T, l.travelerType)) {
                    this.benefitIsSelectedForTraveler(T, l) && T.pricingTravelerTypeOverride && !o && (o = T.pricingTravelerTypeOverride);
                    var D = p ? T.usInboundPricings : T.usOutboundPricings
                      , b = p ? T.usInboundPricingMinimums : T.usOutboundPricingMinimums
                      , A = $.findFirst(D, function(e, t) {
                        return purchasePath.pricingMatchesTravelerTypeAndAgeGroup(e, l, T.pricingTravelerTypeOverride)
                    })
                      , w = $.findFirst(b, function(e, t) {
                        return purchasePath.pricingMatchesTravelerTypeAndAgeGroup(e, l, T.pricingTravelerTypeOverride)
                    });
                    if (A) {
                        var C = this.getIncludeBenefitPricings(t.benefits, T.includeBenefitsInPricing, p, c, l)
                          , S = new TravelerBenefitPricingModel;
                        if (S.benefitID = T.id,
                        S.selected = this.benefitIsSelectedForTraveler(T, l),
                        S.perDay = T.isMultiplier ? (s.maximum * s.deductible + C) * A.value : A.value + C,
                        S.option = A.option,
                        w)
                            S.perDay * l.travelDays < w.value && (S.perDay = w.value / l.travelDays);
                        t.useYearlyPricing && (S.total = T.isMultiplier ? (s.maximum * s.deductible + C) * A.value : A.value + C,
                        S.perDay = S.total / t.maxCoverageDaysPerYear),
                        S.perDay = round(S.perDay, 2),
                        s.benefits.push(S)
                    } else
                        s.validates = !1
                }
            }
        for (var G = 0; G < s.benefits.length; G++) {
            var I = s.benefits[G];
            I.selected && (s.benefitsTotal += t.useYearlyPricing ? I.total : I.perDay)
        }
        return t.useYearlyPricing ? (t.useTierPricing && !i.pricedPerTraveler ? s.total = round(s.maximum * s.deductible / i.travelers.length + s.benefitsTotal, 2) : s.total = round(s.maximum * s.deductible + s.benefitsTotal, 2),
        s.perDay = round(s.total / t.maxCoverageDaysPerYear, 2)) : (s.perDay = round(s.maximum * s.deductible + s.benefitsTotal, 2),
        s.total = s.perDay * l.travelDays),
        s.plan = t.id,
        s.validates,
        $.each([], function(e, t) {
            console.log(t)
        }),
        s
    }
    addPricingToTraveler(e, t, a) {
        for (var r = -1, i = 0; i < e.pricings.length; i++)
            if (e.pricings[i].plan == t) {
                r = i;
                break
            }
        r > -1 ? e.pricings[r] = a : e.pricings.push(a)
    }
    pricingMatchesTravelerTypeAndAgeGroup(e, t, a) {
        return (!e.ageGroupID || t.ageGroup == e.ageGroupID) && (a ? e.travelerType == a : e.travelerType == t.travelerType)
    }
    pricingMatchesTravelerTypeAgeGroupAndOption(e, t, a, r) {
        return !!purchasePath.pricingMatchesTravelerTypeAndAgeGroup(e, a, r) && t == e.option
    }
    benefitIsSelectedForTraveler(e, t) {
        if (!e.selected)
            return !1;
        if (!e.isIndividualized && e.selected)
            return !0;
        if (e.isIndividualized)
            for (var a = 0; a < e.selectedTravelers.length; a++)
                if (t.id == e.selectedTravelers[a].travelerID && e.selectedTravelers[a].selected)
                    return !0;
        return !1
    }
    getIncludeBenefitPricings(e, t, a, r, i) {
        for (var s = 0, n = 0; n < t.length; n++) {
            var o = t[n]
              , u = $.findFirst(e, function(e) {
                return e.id == o
            });
            if (u) {
                var l = a ? u.usInboundPricings : u.usOutboundPricings
                  , d = a ? u.usInboundPricingMinimums : u.usOutboundPricingMinimums
                  , p = $.findFirst(l, function(e, t) {
                    return purchasePath.pricingMatchesTravelerTypeAndAgeGroup(e, i, u.pricingTravelerTypeOverride)
                })
                  , c = $.findFirst(d, function(e, t) {
                    return purchasePath.pricingMatchesTravelerTypeAndAgeGroup(e, i, u.pricingTravelerTypeOverride)
                });
                if (p) {
                    var h = 0;
                    if (c)
                        (h = u.isMultiplier ? result.maximum * result.deductible * p.value : p.value) * i.travelDays < c.value && (h = c.value / i.travelDays);
                    else
                        h = u.isMultiplier ? r * p.value : p.value;
                    s += round(h, 2)
                }
            }
        }
        return s
    }
    async emailSavedApplication(e, t, a, r, i) {
        let s = {
            ID: t,
            ToEmail: e,
            Url: a,
            Subject: r,
            Template: i
        }
          , n = new Promise((e,t)=>{
            $.ajax({
                url: "/email-application",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(s)
            }).done(function(a) {
                a.success ? e(a) : t()
            }).fail(function(e) {
                t()
            })
        }
        );
        return await n
    }
    async getSavedApplication(e) {
        let t = {
            id: e
        }
          , a = new Promise((e,a)=>{
            $.ajax({
                url: PointComfort.API + "/api/purchase-path/application/get",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(t)
            }).done(function(t) {
                t.success ? e(t.data) : a()
            }).fail(function(e) {
                a()
            })
        }
        );
        return await a
    }
    async processCheckout() {
        if ("credit" != purchasePath.data.paymentType)
            throw new Error("Invalid payment type.");
        await this.processTempDataSave();
        var e = await this.processCCAuthorization();
        if (!e.createTransactionResponse || !e.createTransactionResponse.transactionResponse || 1 != e.createTransactionResponse.transactionResponse.responseCode)
            throw new Error("Credit card process failure.");
        var t = e.createTransactionResponse.transactionResponse.transId;
        e = await this.processDataSave(t),
        this.finalizePurchase()
    }
    async processTempDataSave() {
        var e = this.buildSubmissionData();
        let t = new Promise((t,a)=>{
            $.ajax({
                url: PointComfort.API + "/api/purchase-path/save/temp",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(e)
            }).done(function(e) {
                if (e.success) {
                    console.log(e.data);
                    var r = e.data.id
                      , i = e.data.result
                      , s = e.data.payload.trip.premiumTotal;
                      //, n = e.data.result.certificate.certificate__;
                    purchasePath.data.guid = r,
//                     purchasePath.data.trip.id = i.trip.record_id_,
//                     sessionStorage.setItem("price", parseFloat(s.substring(1)).toFixed(2)),
//                     sessionStorage.setItem("certificate", n),
                    t({
                        id: r,
                        //tripId: i.trip.record_id_,
                        data: i
                    })
                } else
                    a(new Error(e.errors[0]))
            }).fail(function(e) {
                var t = e.errors ? e.errors[0] : "An error occurred submitting your data.";
                a(new Error(t))
            })
        }
        );
        return await t
    }
    async processCCAuthorization() {
        let e = new Promise((e,t)=>{
            var a = purchasePath.data.creditCard.nameOnCard.split(" ")[0]
              , r = purchasePath.data.creditCard.nameOnCard.replace(a + " ", "")
              , i = {
                action: "transaction",
                tripId: purchasePath.data.trip.id,
                amount: purchasePath.data.selectedPlan.total.toFixed(2),
                cardNumber: purchasePath.data.creditCard.cardNumber.replace(/-/g, "").replace(/ /g, ""),
                cardExpirationMonth: purchasePath.data.creditCard.expirationMonth,
                cardExpirationYear: purchasePath.data.creditCard.expirationYear,
                cardCode: purchasePath.data.creditCard.csv,
                firstName: a,
                lastName: r,
                address: purchasePath.data.primaryAddress.street + (purchasePath.data.primaryAddress.suiteOrApt ? " " + purchasePath.data.primaryAddress.suiteOrApt : ""),
                city: purchasePath.data.primaryAddress.city,
                state: purchasePath.data.primaryAddress.stateOrRegion,
                postalCode: purchasePath.data.primaryAddress.postalCode,
                country: purchasePath.getCountryNameFromCode(purchasePath.data.primaryAddress.country),
                emailAddress: purchasePath.data.myPointComfort.email
            };
            $.ajax({
                url: PointComfort.TripAPI + "/service/api/authorize",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(i)
            }).done(function(t) {
                e(t)
            }).fail(function(e) {
                var a = e.errors ? e.errors[0] : "An error occurred submitting your data.";
                t(new Error(a))
            })
        }
        );
        return await e
    }
    async processPayPalAuthorization(e) {
        let t = new Promise((t,a)=>{
            var r = {
                action: "save",
                tripId: purchasePath.data.trip.id,
                transactionId: e,
                paymentStatus: "Successful"
            };
            $.ajax({
                url: PointComfort.TripAPI + "/service/api/authorize",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(r)
            }).done(function(e) {
                t(e)
            }).fail(function(e) {
                var t = e.errors ? e.errors[0] : "An error occurred submitting your data.";
                a(new Error(t))
            })
        }
        );
        return await t
    }
    async processDataSave(e) {
        let t = new Promise((t,a)=>{
            var r = {
                id: purchasePath.data.guid,
                transactionId: e
            };
            $.ajax({
                url: PointComfort.API + "/api/purchase-path/save",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(r)
            }).done(function(e) {
                e.success ? t(e.data) : a(new Error(e.errors[0]))
            }).fail(function(e) {
                var t = e.errors ? e.errors[0] : "An error occurred submitting your data.";
                a(new Error(t))
            })
        }
        );
        return await t
    }
    finalizePurchase() {
        window.location.href = this._data.settings.successfulPurchaseRedirectUrl
    }
    buildSubmissionData() {
        var e = this._data.trip.travelerGroups[0].travelers[0]
          , t = {
            street: this._data.primaryAddress.street,
            suiteOrApt: this._data.primaryAddress.apartmentNumber,
            city: this._data.primaryAddress.city,
            stateOrRegion: this._data.primaryAddress.stateOrRegion,
            postalCode: this._data.primaryAddress.postalCode,
            country: this.getCountryNameFromCode(this._data.primaryAddress.country)
        }
          , a = {
            companyID: this._data.companyID,
            planID: this._data.selectedPlan.id,
            useYearlyPricing: this._data.selectedPlan.useYearlyPricing,
            deductible: this._data.selectedPlan.deductible.selected,
            policyMaximum: this._data.selectedPlan.maximum.selected,
            selectedBenefitIDs: []
        };
        $.each(this._data.selectedPlan.benefits, function(e, t) {
            t.selected && a.selectedBenefitIDs.push(t.id)
        });
        var r = [];
        $.each(this._data.trip.travelerGroups, function(e, a) {
            var i = {
                travelers: []
            };
            $.each(a.travelers, function(e, a) {
                var r = {
                    travelerType: a.travelerType,
                    firstName: a.firstName,
                    lastName: a.lastName,
                    address: t,
                    dateOfBirth: a.dateOfBirth,
                    gender: a.gender,
                    departureDate: a.departureDate,
                    returnDate: a.returnDate,
                    email: a.email,
                    travelDays: a.travelDays,
                    age: purchasePath.calculateAgeFromDateOfBirth(a.dateOfBirth),
                    citizenship: purchasePath.getCountryNameFromCode(a.citizenship),
                    pricings: a.pricings,
                    insuranceCompany: a.insuranceCompany,
                    policyNumber: a.policyNumber
                };
                i.travelers.push(r)
            }),
            r.push(i)
        });
        var i = {
            companyID: this._data.companyID,
            planID: this._data.selectedPlan.id,
            email: null,
            password: null,
            recordId: null,
            firstName: null,
            lastName: null,
            address: null
        };
        return this._data.myPointComfort.isNewUser ? (i.email = this._data.myPointComfort.email,
        i.password = this._data.myPointComfort.password,
        i.firstName = e.firstName,
        i.lastName = e.lastName,
        i.address = t) : i.recordId = this._data.myPointComfort.user.id,
        {
            acceptsAgreement: this._data.acceptsAgreement,
            plan: a,
            trip: {
                destination: this.getCountryNameFromCode(this._data.trip.destination),
                departureDate: new Date(purchasePathApp.earliestDepartureDate),
                returnDate: new Date(purchasePathApp.latestReturnDate),
                billingAddress: t,
                paymentType: this._data.paymentType,
                total: +this._data.selectedPlan.total.toFixed(2)
            },
            travelerGroups: r,
            account: i
        }
    }
}
function PurchasePathModel() {
    return {
        guid: null,
        hasPricing: !1,
        currentStep: 1,
        companyID: null,
        company: null,
        regions: null,
        countries: null,
        ageGroups: null,
        whiteLabels: null,
        pricings: null,
        plans: [],
        product: "",
        defaultTravelerType: null,
        options: {
            products: [],
            genders: [{
                id: "female",
                name: "Female"
            }, {
                id: "male",
                name: "Male"
            }],
            destinationCountries: [],
            originCountries: [],
            homeCountries: [],
            billingAddressCountries: [],
            regions: [],
            travelerTypes: [],
            availableTravelerTypesRemaining: [],
            previousTravelers: []
        },
        settings: {
            sections: null,
            departureDate: {
                disabledDates: {
                    to: new Date,
                    from: null
                },
                openDate: null
            },
            returnDate: {
                disabledDates: {
                    to: new moment(moment().format("YYYY-MM-DD") + " 00:00:00").add(1, "days").toDate(),
                    from: null
                },
                openDate: null
            },
            dateOfBirth: {
                disabledDates: {
                    from: new moment(moment().format("YYYY-MM-DD") + " 00:00:00").add(2, "days").toDate()
                },
                openDate: null
            },
            successfulPurchaseRedirectUrl: null
        },
        selectedProductOption: null,
        selectedPlan: null,
        acceptsAgreement: !1,
        primaryAddress: {
            street: null,
            apartmentNumber: null,
            city: null,
            stateOrRegion: "",
            country: "",
            postalCode: null
        },
        trip: {
            id: null,
            destination: "",
            travelerGroups: [],
            includesUSTravel: !1,
            needHealthInsurance: null,
            needCoverageLetters: !1
        },
        myPointComfort: {
            email: null,
            emailRepeated: null,
            password: null,
            passwordRepeated: null,
            isNewUser: !0,
            user: {
                id: null,
                fullName: null,
                firstName: null,
                lastName: null,
                email: null
            }
        },
        paymentType: "credit",
        creditCard: {
            nameOnCard: null,
            cardNumber: null,
            csv: null,
            expirationMonth: null,
            expirationYear: null,
            cardType: null
        },
        validating: !1,
        errors: []
    }
}
function TierModel(e, t, a, r) {
    return {
        id: e,
        name: t,
        travelers: [],
        tierPrice: 0,
        pricedPerTraveler: a,
        useTravelerType: r
    }
}
function Traveler(e, t) {
    return {
        id: t,
        rid: null,
        firstName: null,
        middleInitial: null,
        lastName: null,
        gender: "",
        email: null,
        citizenship: "",
        dateOfBirth: null,
        ageGroup: null,
        departureDate: null,
        returnDate: null,
        travelDays: 0,
        travelerType: e,
        insuranceCompany: null,
        policyNumber: null,
        usesPrimaryInsuranceInformation: !1,
        pricings: [],
        settings: {
            departureDate: {
                disabledDates: {
                    to: new Date,
                    from: null
                },
                openDate: null
            },
            returnDate: {
                disabledDates: {
                    to: new moment(moment().format("YYYY-MM-DD") + " 00:00:00").add(1, "days").toDate(),
                    from: null
                },
                openDate: null
            }
        }
    }
}
function TravelerGroup() {
    return {
        travelers: [],
        availableTravelerTypesRemaining: []
    }
}
function TravelerPricingModel() {
    return {
        plan: "",
        validates: !0,
        maximum: 0,
        deductible: 0,
        benefits: [],
        benefitsTotal: 0,
        perDay: 0,
        tier: null,
        total: 0
    }
}
function TravelerBenefitPricingModel() {
    return {
        benefitID: null,
        selected: !1,
        perDay: 0,
        total: 0,
        option: null
    }
}
function validateStep(e, t) {
    if (purchasePath.data.product && !purchasePath.data.hasPricing && '"TripTime2020"' !== purchasePath.data.selectedProductOption.product)
        return purchasePathApp.showModalError("Company " + purchasePath.data.companyID + " has no valid pricing data."),
        !1;
    var a = !1;
    if (purchasePath.data.validating = !0,
    t)
        switch (e) {
        case 1:
            a = validatePurchasePathStep1();
            break;
        case 2:
            a = validatePurchasePathStep2();
            break;
        case 3:
            a = validatePurchasePathStep3();
            break;
        case 4:
            a = validatePurchasePathStep4()
        }
    else
        switch (e) {
        case 1:
            a = validateQuoteEngineStep1();
            break;
        case 2:
            a = validateQuoteEngineStep2();
            break;
        case 3:
            a = validateQuoteEngineStep3();
            break;
        case 4:
            a = validateQuoteEngineStep4()
        }
    return purchasePath.data.validating = !a,
    a
}
function isValidProduct() {
    return purchasePath.data.product
}
function isValidDestination() {
    return !(!purchasePath.data.selectedProductOption || "AnyTime" !== purchasePath.data.selectedProductOption.product) || (!(!purchasePath.data.selectedProductOption || "WorldExplMulti" !== purchasePath.data.selectedProductOption.product) || "" !== purchasePath.data.trip.destination && void 0 !== purchasePath.data.trip.destination)
}
function isValidTravelerFirstName(e, t) {
    return purchasePath.data.trip.travelerGroups[e].travelers[t].firstName
}
function isValidTravelerLastName(e, t) {
    return purchasePath.data.trip.travelerGroups[e].travelers[t].lastName
}
function isValidTravelerEmail(e, t) {
    return purchasePath.data.trip.travelerGroups[e].travelers[t].email && isValidEmail(purchasePath.data.trip.travelerGroups[e].travelers[t].email)
}
function isValidTravelerDepartureDate(e, t) {
    if (!purchasePath.data.trip.travelerGroups[e].travelers[t].departureDate)
        return !1;
    var a = new moment(purchasePath.data.trip.travelerGroups[e].travelers[t].departureDate)
      , r = new moment(purchasePath.data.settings.departureDate.disabledDates.to);
    return a.hours(0).minutes(0).seconds(0),
    r.hours(0).minutes(0).seconds(0),
    !a.isBefore(new moment) && a.diff(r, "days") >= 0
}
function isValidTravelerReturnDate(e, t) {
    if (!purchasePath.data.trip.travelerGroups[e].travelers[t].returnDate)
        return !1;
    if (!purchasePath.data.whiteLabels)
        return !1;
    var a = new moment(purchasePath.data.trip.travelerGroups[e].travelers[t].returnDate)
      , r = new moment(purchasePath.data.trip.travelerGroups[e].travelers[t].departureDate);
    if (a.hours(0).minutes(0).seconds(0),
    r.hours(0).minutes(0).seconds(0),
    a.isBefore(new moment))
        return !1;
    var i = purchasePath.data.trip.includesUSTravel ? purchasePath.data.whiteLabels.minTripDaysUS : purchasePath.data.whiteLabels.minTripDaysNonUS
      , s = purchasePath.data.trip.includesUSTravel ? purchasePath.data.whiteLabels.maxTripDaysUS : purchasePath.data.whiteLabels.maxTripDaysNonUS
      , n = a.diff(r, "days");
    return n >= i && n <= s
}
function isValidTravelerDateOfBirth(e, t) {
    var a = purchasePath.data.trip.travelerGroups[e].travelers[t];
    if (!a.dateOfBirth)
        return !1;
    if (new moment(a.dateOfBirth).isAfter(moment()))
        return !1;
    var r = new moment(a.dateOfBirth)
      , i = a.travelerType
      , s = $.findFirst(purchasePath.data.options.travelerTypes, function(e) {
        return i == e.id
    });
    if (purchasePath.data.selectedProductOption.travelerMinimumAgeInDays) {
        var n = (new moment).hours(0).minutes(0).seconds(0).subtract(purchasePath.data.selectedProductOption.travelerMinimumAgeInDays, "days");
        if (r.isAfter(n))
            return !1
    }
    var o = s ? s.maximumAgeInYears : 99
      , u = s ? s.minimumAgeInYears : 0
      , l = (new moment).subtract(o, "years");
    n = (new moment).subtract(u, "years");
    return r.diff(l) > 0 && n.diff(r) > 0
}
function isValidTravelerGender(e, t) {
    return purchasePath.data.trip.travelerGroups[e].travelers[t].gender
}
function isValidTravelerCitizenship(e, t) {
    return purchasePath.data.trip.travelerGroups[e].travelers[t].citizenship
}
function isValidTravelerType(e, t) {
    return purchasePath.data.trip.travelerGroups[e].travelers[t].travelerType
}
function isValidTravelerInsuranceCompany(e, t) {
    return !purchasePathApp.isAnyTime || !purchasePathApp.isWorldExplMulti || purchasePath.data.trip.travelerGroups[e].travelers[t].insuranceCompany
}
function isValidTravelerPolicyNumber(e, t) {
    return !purchasePathApp.isAnyTime || !purchasePathApp.isWorldExplMulti || purchasePath.data.trip.travelerGroups[e].travelers[t].policyNumber
}
function isValidHealthInsurance() {
    if (purchasePath.data.trip.needHealthInsurance || purchasePath.data.selectedProductOption && "AnyTime" !== purchasePath.data.selectedProductOption.product)
        return !0
}
function isValidPrimaryAddressStreet() {
    return purchasePath.data.primaryAddress.street
}
function isValidPrimaryAddressCity() {
    return purchasePath.data.primaryAddress.city
}
function isValidPrimaryAddressStateOrRegion() {
    return purchasePath.data.primaryAddress.stateOrRegion
}
function isValidPrimaryAddressPostalCode() {
    return purchasePath.data.primaryAddress.postalCode
}
function isValidPrimaryAddressCountry() {
    return purchasePath.data.primaryAddress.country
}
function isValidMyPointComfortEmail() {
    return !purchasePath.data.myPointComfort.isNewUser || purchasePath.data.myPointComfort.email && isValidEmail(purchasePath.data.myPointComfort.email)
}
function isValidMyPointComfortEmailRepeated() {
    return !purchasePath.data.myPointComfort.isNewUser || purchasePath.data.myPointComfort.emailRepeated && purchasePath.data.myPointComfort.email === purchasePath.data.myPointComfort.emailRepeated
}
function isValidMyPointComfortPassword() {
    if (!purchasePath.data.myPointComfort.isNewUser)
        return !0;
    return /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{7,}$/.test(purchasePath.data.myPointComfort.password)
}
function isValidMyPointComfortPasswordRepeated() {
    return !purchasePath.data.myPointComfort.isNewUser || purchasePath.data.myPointComfort.passwordRepeated && purchasePath.data.myPointComfort.password === purchasePath.data.myPointComfort.passwordRepeated
}
function isValidCreditCardNameOnCard() {
    return "credit" === purchasePath.data.paymentType && purchasePath.data.creditCard.nameOnCard || "paypal" === purchasePath.data.paymentType
}
function isValidCreditCardNumber() {
    if ("paypal" === purchasePath.data.paymentType)
        return !0;
    if (!purchasePath.data.creditCard.cardNumber)
        return !1;
    var e = new RegExp("^4")
      , t = new RegExp("^3[47]")
      , a = new RegExp("^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)");
    return null != purchasePath.data.creditCard.cardNumber.match(e) ? purchasePath.data.creditCard.cardType = "Visa" : /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(purchasePath.data.creditCard.cardNumber) ? purchasePath.data.creditCard.cardType = "Mastercard" : null != purchasePath.data.creditCard.cardNumber.match(t) ? purchasePath.data.creditCard.cardType = "AMEX" : null != purchasePath.data.creditCard.cardNumber.match(a) ? purchasePath.data.creditCard.cardType = "Discover" : purchasePath.data.creditCard.cardType = null,
    null != purchasePath.data.creditCard.cardType
}
function isValidCreditCardExpirationMonth() {
    return "credit" === purchasePath.data.paymentType && purchasePath.data.creditCard.expirationMonth || "paypal" === purchasePath.data.paymentType
}
function isValidCreditCardExpirationYear() {
    return "credit" === purchasePath.data.paymentType && purchasePath.data.creditCard.expirationYear || "paypal" === purchasePath.data.paymentType
}
function isValidCreditCardCSV() {
    return "credit" === purchasePath.data.paymentType && purchasePath.data.creditCard.csv || "paypal" === purchasePath.data.paymentType
}
function isValidEmail(e) {
    return /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,6})+$/.test(e)
}
function validatePurchasePathStep1() {
    var e = !0;
    return isValidProduct() || (e = !1),
    $.each(purchasePath.data.trip.travelerGroups, function(t, a) {
        $.each(a.travelers, function(a, r) {
            isValidTravelerDepartureDate(t, a) && isValidTravelerReturnDate(t, a) && isValidTravelerGender(t, a) && isValidTravelerCitizenship(t, a) && isValidTravelerDateOfBirth(t, a) && isValidTravelerType(t, a) && isValidHealthInsurance() || (e = !1)
        })
    }),
    isValidDestination() || (e = !1),
    e
}
function validatePurchasePathStep2() {
    var e = !0;
    return !!purchasePath.data.selectedPlan && (purchasePath.data.selectedPlan.validates || (e = !1),
    0 === purchasePath.data.selectedPlan.total ? (e = !1,
    !1) : "WorldExplorerBasic20" !== purchasePath.data.selectedPlan.id && "GoTime20" !== purchasePath.data.selectedPlan.id && "DiveGoTime20" !== purchasePath.data.selectedPlan.id && "BusinessGoTime20" !== purchasePath.data.selectedPlan.id && "MissionaryGoTime20" !== purchasePath.data.selectedPlan.id || 2e6 !== purchasePath.data.selectedPlan.maximum.selected && 5e3 !== purchasePath.data.selectedPlan.deductible.selected ? e : (console.log(purchasePath.data.selectedPlan.total),
    e = !1,
    !1))
}
function validatePurchasePathStep3() {
    var e = !0;
    return $.each(purchasePath.data.trip.travelerGroups, function(t, a) {
        $.each(a.travelers, function(a, r) {
            isValidTravelerFirstName(t, a) && isValidTravelerLastName(t, a) && isValidTravelerEmail(t, a) && isValidTravelerInsuranceCompany(t, a) || (e = !1)
        })
    }),
    isValidPrimaryAddressStreet() || (e = !1),
    isValidPrimaryAddressCity() || (e = !1),
    isValidPrimaryAddressStateOrRegion() || (e = !1),
    isValidPrimaryAddressPostalCode() || (e = !1),
    isValidPrimaryAddressCountry() || (e = !1),
    e
}
function validatePurchasePathStep4() {
    var e = !0;
    return purchasePath.data.acceptsAgreement || (e = !1),
    isValidMyPointComfortEmail() || (e = !1),
    isValidMyPointComfortEmailRepeated() || (e = !1),
    isValidMyPointComfortPassword() || (e = !1),
    isValidMyPointComfortPasswordRepeated() || (e = !1),
    isValidCreditCardNameOnCard() || (e = !1),
    isValidCreditCardNumber() || (e = !1),
    isValidCreditCardExpirationMonth() || (e = !1),
    isValidCreditCardExpirationYear() || (e = !1),
    isValidCreditCardCSV() || (e = !1),
    e
}
function validateQuoteEngineStep1() {
    var e = !0;
    return isValidProduct() || (e = !1),
    e
}
function validateQuoteEngineStep2() {
    var e = !0;
    return isValidTravelerDepartureDate(0, 0) || (e = !1),
    isValidTravelerReturnDate(0, 0) || (e = !1),
    isValidDestination() || (e = !1),
    isValidHealthInsurance() || (e = !1),
    e
}
function validateQuoteEngineStep3() {
    var e = !0;
    return $.each(purchasePath.data.trip.travelerGroups, function(t, a) {
        $.each(a.travelers, function(a, r) {
            isValidTravelerDepartureDate(t, a) && isValidTravelerReturnDate(t, a) && isValidTravelerGender(t, a) && isValidTravelerCitizenship(t, a) && isValidTravelerDateOfBirth(t, a) && isValidTravelerType(t, a) || (e = !1)
        })
    }),
    e
}
function validateQuoteEngineStep4() {
    var e = !0;
    return !!purchasePath.data.selectedPlan && (purchasePath.data.selectedPlan.validates || (e = !1),
    0 == purchasePath.data.selectedPlan.total && (e = !1),
    "WorldExplorerBasic20" !== purchasePath.data.selectedPlan.id && "DiveGoTime20" !== purchasePath.data.selectedPlan.id && "GoTime20" !== purchasePath.data.selectedPlan.id && "BusinessGoTime20" !== purchasePath.data.selectedPlan.id && "MissionaryGoTime20" !== purchasePath.data.selectedPlan.id || 2e6 !== purchasePath.data.selectedPlan.maximum.selected && 5e3 !== purchasePath.data.selectedPlan.deductible.selected || (e = !1),
    e)
}
Vue.component("pcu-plan", {
    template: "#pcu-plan",
    props: {
        plan: Object,
        travelerGroups: Array,
        isOnlyPlan: Boolean
    },
    methods: {
        findTravelerByID: function(e) {
            var t = null;
            return $.each(this.travelerGroups, function(a, r) {
                return $.each(r.travelers, function(a, r) {
                    return r.id == e && (t = r),
                    null == t
                }),
                null == t
            }),
            t
        },
        planSelected: function() {
            this.plan.selected = !0,
            this.$emit("selected", this.plan)
        },
        planOptionChanged: function(e) {
            if ("single" === e)
                this.$emit("changed", this.plan);
            else
                for (var t = purchasePathApp.plans[0].deductible.selected, a = purchasePathApp.plans[0].maximum.selected, r = 0; r < purchasePathApp.plans.length; r++)
                    purchasePathApp.plans[r].deductible.selected = t,
                    purchasePathApp.plans[r].maximum.selected = a,
                    this.$emit("changed", this.planOptionsChanged(purchasePathApp.plans[r]))
        },
        benefitToggled: function(e) {
            this.$emit("benefit-toggled", this.plan, e)
        },
        benefitsToggled: function(e, t) {
            this.$emit("benefits-toggled", purchasePathApp.plans, t)
        },
        displayName: function(e) {
            var t = this.findTravelerByID(e);
            return t ? t.firstName && t.lastName ? t.firstName + " " + t.lastName : 1 == t.id ? "Primary" : "Traveler " + t.id : ""
        },
        dateOfBirth: function(e) {
            var t = this.findTravelerByID(e);
            return t ? formatDate(t.dateOfBirth) : ""
        },
        calculateBenefitPerDayForAllTravelers: function(e) {
            var t = 0
              , a = 0
              , r = this.plan;
            return $.each(this.travelerGroups, function(i, s) {
                $.each(s.travelers, function(i, s) {
                    if (s.pricings) {
                        var n = $.findFirst(s.pricings, function(e) {
                            return e.plan == r.id
                        });
                        if (n) {
                            var o = $.findFirst(n.benefits, function(t) {
                                return t.benefitID == e
                            });
                            o && (t += r.useYearlyPricing ? o.total : s.travelDays * round(o.perDay, 2),
                            "WorldExplorerBasic20" !== r.id && "DiveGoTime20" !== r.id && "GoTime20" !== r.id && "BusinessGoTime20" !== r.id && "MissionaryGoTime20" !== r.id || 2e6 !== r.maximum.selected && 5e3 !== r.deductible.selected || (t = 0))
                        }
                    }
                    a += s.travelDays
                })
            }),
            r.useYearlyPricing && (a = r.maxCoverageDaysPerYear),
            "WorldExplorerBasic20" !== r.id && "DiveGoTime20" !== r.id && "GoTime20" !== r.id && "BusinessGoTime20" !== r.id && "MissionaryGoTime20" !== r.id || 2e6 !== r.maximum.selected && 5e3 !== r.deductible.selected || (t = 0),
            round(t / a, 2).toFixed(2) <= 0 ? "(Not Available)" : (r.useYearlyPricing ? "" : "(+$" + round(t / a, 2).toFixed(2)) + (r.useYearlyPricing ? "" : "/day)")
        }
    }
}),
Vue.component("pcu-plan-overview", {
    template: "#pcu-plan-overview",
    props: {
        plan: Object
    },
    computed: {
        hasPlan: function() {
            return null != this.plan
        },
        deductible: function() {
            if (!this.plan)
                return "";
            var e = this.plan
              , t = $.findFirst(this.plan.deductible.options, function(t) {
                return t.value == e.deductible.selected
            });
            return t ? t.display : ""
        },
        maximum: function() {
            if (!this.plan)
                return "";
            var e = this.plan
              , t = $.findFirst(this.plan.maximum.options, function(t) {
                return t.value == e.maximum.selected
            });
            return t ? t.display : ""
        }
    }
}),
Vue.component("pcu-plan-selector", {
    template: "#pcu-plan-selector",
    props: {
        isSelected: Boolean
    },
    methods: {
        selectorClicked: function() {
            this.isSelected || this.$emit("selected")
        }
    }
}),
Vue.component("pcu-section-helper", {
    template: "#pcu-section-helper",
    props: {
        notes: Array,
        additionalClasses: {
            type: String,
            default: ""
        },
        additionalClasses2: {
            type: String,
            default: ""
        },
        additionalClasses3: {
            type: String,
            default: ""
        },
        additionalClasses4: {
            type: String,
            default: ""
        }
    }
}),
Vue.component("switch-button", {
    template: "#switch-button",
    model: {
        prop: "isEnabled",
        event: "toggle"
    },
    props: {
        isEnabled: Boolean,
        benefit: Object,
        plan: Object,
        color: {
            type: String,
            required: !1,
            default: "#4D4D4D"
        },
        cursor: {
            type: String,
            required: !1,
            default: "pointer"
        }
    },
    created: function() {
        var e = this.getBenefitWhiteLabel()
          , t = Number(this.calculateBenefitPerDayForAllTravelers(this.benefit.id, this.plan));
        this.setCursorAndToggle(e, t)
    },
    updated: function() {
        var e = this.getBenefitWhiteLabel()
          , t = Number(this.calculateBenefitPerDayForAllTravelers(this.benefit.id, this.plan));
        this.setCursorAndToggle(e, t)
    },
    methods: {
        toggle: function() {
            var e = this.getBenefitWhiteLabel();
            Number(this.calculateBenefitPerDayForAllTravelers(this.benefit.id, this.plan)) > 0 && !e.isSelected && this.$emit("toggle", !this.isEnabled)
        },
        getBenefitWhiteLabel() {
            return purchasePath.data.whiteLabels.planWhiteLabels.find(e=>e.plan === this.plan.id).benefitWhiteLabels.find(e=>{
                switch (purchasePath.data.selectedProductOption.product,
                this.benefit.id) {
                case "Adventure Sport":
                    this.benefit.id = "Adventure Pack";
                    break;
                case "Personal Property":
                    this.benefit.id = "Property Benefit";
                    break;
                case "AD&D":
                    this.benefit.id = "Life Pack";
                    break;
                case "Transportation":
                    this.benefit.id = "Evac Pack"
                }
                return console.log(e.benefit.id),
                e.benefit === this.benefit.id
            }
            )
        },
        setCursorAndToggle(e, t) {
            var a = purchasePath.data.trip.travelerGroups[0].travelers[0];
            t <= 0 && a.dateOfBirth && (this.cursor = "not-allowed",
            this.benefit.selected = !1),
            t > 0 && !e.isSelected && (this.cursor = "pointer"),
            t <= 0 && e.isSelected && a.dateOfBirth ? this.benefit.selected = !1 : t > 0 && e.isSelected && a.dateOfBirth && (this.benefit.selected = !0,
            this.cursor = "not-allowed")
        },
        calculateBenefitPerDayForAllTravelers: function(e, t) {
            var a = 0
              , r = 0;
            return $.each(purchasePath.data.trip.travelerGroups, function(i, s) {
                $.each(s.travelers, function(i, s) {
                    if (s.pricings) {
                        var n = $.findFirst(s.pricings, function(e) {
                            return e.plan == t.id
                        });
                        if (n) {
                            var o = $.findFirst(n.benefits, function(t) {
                                return t.benefitID == e
                            });
                            o && (a += t.useYearlyPricing ? o.total : s.travelDays * round(o.perDay, 2))
                        }
                    }
                    r += s.travelDays
                })
            }),
            t.useYearlyPricing && (r = t.maxCoverageDaysPerYear),
            round(a / r, 2).toFixed(2)
        }
    }
}),
Vue.component("pcu-traveler", {
    template: "#pcu-traveler",
    props: {
        index: Number,
        groupIndex: Number,
        traveler: Object,
        availableTravelerTypesRemaining: Array,
        validating: Boolean,
        settings: Object,
        options: Object,
        whiteLabels: Object,
        includesUSTravel: Boolean,
        minimumAgeInDays: Number
    },
    components: {
        vuejsDatepicker: vuejsDatepicker
    },
    computed: {
        dateOfBirth: {
            get: function() {
                var e = this.traveler.dateOfBirth;
                return e ? new moment(e).format("YYYY-MM-DD") : null
            },
            set: function(e) {
                this.$emit("date-of-birth-changed", this.groupIndex, this.index, new moment(e).toDate())
            }
        },
        departureDate: {
            get: function() {
                var e = this.traveler.departureDate;
                return e ? new moment(e).format("YYYY-MM-DD") : null
            },
            set: function(e) {
                this.$emit("departure-date-changed", this.groupIndex, this.index, new moment(e).toDate())
            }
        },
        returnDate: {
            get: function() {
                var e = this.traveler.returnDate;
                return e ? new moment(e).format("YYYY-MM-DD") : null
            },
            set: function(e) {
                this.$emit("return-date-changed", this.groupIndex, this.index, new moment(e).toDate())
            }
        },
        calculatedDateOfBirthDisabledDates: function() {
            var e = this.traveler.travelerType
              , t = $.findFirst(this.options.travelerTypes, function(t) {
                return e == t.id
            })
              , a = t ? t.maximumAgeInYears : 99
              , r = t ? t.minimumAgeInYears : 0
              , i = (new moment).subtract(a, "years")
              , s = (new moment).subtract(r, "years");
            return this.minimumAgeInDays && this.minimumAgeInDays / 365 > r && (s = (new moment).subtract(this.minimumAgeInDays, "days")),
            {
                from: s.toDate(),
                to: i.toDate()
            }
        },
        calculatedDateOfBirthOpenDate: function() {
            var e = this.traveler.travelerType
              , t = $.findFirst(this.options.travelerTypes, function(t) {
                return e == t.id
            })
              , a = t ? t.minimumAgeInYears : 0;
            return (new moment).subtract(a, "years").toDate()
        },
        dateOfBirthError: function() {
            if (moment(this.traveler.dateOfBirth).isAfter(moment()))
                return "Date of birth cannot be in the future.";
            var e = new moment(this.traveler.dateOfBirth)
              , t = this.traveler.travelerType
              , a = $.findFirst(this.options.travelerTypes, function(e) {
                return t == e.id
            });
            if (this.minimumAgeInDays) {
                var r = (new moment).hours(0).minutes(0).seconds(0).subtract(this.minimumAgeInDays, "days");
                if (e.isAfter(r))
                    return "Traveler cannot be under " + this.minimumAgeInDays + " days old."
            }
            var i = a ? a.maximumAgeInYears : 99
              , s = a ? a.minimumAgeInYears : 0
              , n = (new moment).subtract(i, "years");
            r = (new moment).subtract(s, "years");
            return e.diff(n) > 0 && r.diff(e) > 0 ? void 0 : "Traveler age is outside age range of " + s + " to " + i + "."
        },
        departureDateError: function() {
            var e = this.whiteLabels ? this.whiteLabels.advancedDepartureDate : "X";
            return this.isAnyTime || this.isWorldExplMulti ? "Certificate start date must be no earlier than tomorrow and within " + e + " days." : "Departure date must be no earlier than tomorrow and within " + e + " days."
        },
        returnDateError: function() {
            var e = this.whiteLabels ? this.whiteLabels.maxTripDaysUS : "X";
            return this.isAnyTime || this.isWorldExplMulti ? "Certificate end date must be after the certificate start date and within " + e + " days of certificate start date." : "Return date must be after the departure date and within " + e + " days of departure date."
        },
        tripLengthCanOnlyBeOneDay: function() {
            return !!this.whiteLabels && (this.includedUSTravel ? this.whiteLabels.minTripDaysUS : this.whiteLabels.minTripDaysNonUS) == (this.includedUSTravel ? this.whiteLabels.maxTripDaysUS : this.whiteLabels.maxTripDaysNonUS)
        },
        isAnyTime: function() {
            return this.settings.sections && this.selectedProductOption && "AnyTime" == this.selectedProductOption.product
        },
        isWorldExplMulti: function() {
            return this.settings.sections && this.selectedProductOption && "WorldExplMulti" == this.selectedProductOption.product
        }
    },
    methods: {
        dateOfBirthChanged: function(e) {
            var t = e && e.target ? e.target.valueAsDate : e;
            this.$emit("date-of-birth-changed", this.groupIndex, this.index, t)
        },
        departureDateChanged: function(e) {
            var t = e && e.target ? e.target.valueAsDate : e;
            this.$emit("departure-date-changed", this.groupIndex, this.index, t)
        },
        returnDateChanged: function(e) {
            var t = e && e.target ? e.target.valueAsDate : e;
            this.$emit("return-date-changed", this.groupIndex, this.index, t)
        },
        removeTravelerGroup: function(e) {
            e && e.preventDefault,
            this.$emit("remove-group", this.groupIndex)
        },
        removeTravelerFromGroup: function(e) {
            e && e.preventDefault(),
            this.$emit("removed", this.groupIndex, this.index)
        },
        travelerTypeChanged: function(e) {
            this.$emit("traveler-type-changed", this.groupIndex, this.index, e)
        }
    }
}),
Vue.component("pcu-traveler-overview", {
    template: "#pcu-traveler-overview",
    props: {
        traveler: Object,
        index: Number
    },
    computed: {
        displayName: function() {
            return this.traveler.firstName && this.traveler.lastName ? this.traveler.firstName + " " + this.traveler.lastName : 1 == this.traveler.id ? "Primary" : "Traveler " + this.traveler.id
        }
    }
}),
Vue.component("pcu-trip-rates", {
    template: "#pcu-trip-rates",
    props: {
        trip: Object,
        plan: Object
    },
    methods: {
        dailyRate: function(e) {
            if (!e.pricings)
                return "";
            var t = this.plan
              , a = $.findFirst(e.pricings, function(e) {
                return e.plan == t.id
            });
            return a ? a.perDay.toFixed(2) : ""
        },
        total: function(e) {
            if (!e.pricings)
                return "";
            var t = this.plan
              , a = $.findFirst(e.pricings, function(e) {
                return e.plan == t.id
            });
            return a ? a.total.toFixed(2) : ""
        }
    }
});